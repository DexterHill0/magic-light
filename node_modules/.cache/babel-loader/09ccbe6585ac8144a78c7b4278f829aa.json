{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport function _Bluetooth() {\n  const [state, setState] = useState([]);\n  useEffect(() => {\n    addDevice();\n  }, [state]);\n  const devices = [];\n\n  const bluetoothInitialize = () => {\n    for (let i = 0; i < 5; i++) {\n      let a = {\n        name: \"test\",\n        mac: i.toString(),\n        connected: false\n      };\n      console.log(state); //setState({found: [...state.found, a]});\n    }\n  };\n\n  const connect = id => {\n    console.log(\"hi\"); // const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n    // devices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n    // \tif(id === item.mac) {\n    // \t\tlet updated = <BluetoothDeviceItem key={item.mac} mac={item.mac} name={item.name} onClick={this.connect} connectingState={'connecting'}></BluetoothDeviceItem>\t\n    // \t\tbluetoothDevices[currentDevices.findIndex(function(data){ return data.id === id })] = updated;\n    // \t}\n    // });\n    // bluetoothDevices.forEach(element => {\n    // \tconsole.log(element);\n    // \tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n    // \t\tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n    // \t\tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n    // \t\tindexes.forEach(indx => {\n    // \t\t\tbluetoothDevices[indx] = updated;\n    // \t\t});\n    // \t}\n    // \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n    // \t//updating the clicked device to connecting state\n    // \tconsole.log(element);\n    // });\n  };\n\n  const addDevice = () => {//let d = state.found[state.found.length - 1]\n    //console.log(d);\n    //devices.push(<BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} connectingState={d.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>);\n  };\n\n  return {\n    devices,\n    bluetoothInitialize,\n    connect\n  };\n}\nexport default _Bluetooth;\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n} //this.checkEnabled();\n// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n//   if(result.status === \"disabled\") {\n//     this.checkEnabled();\n//   }\n// });\n// const scan = async (timeout) => {\n// \tif (!isCordova) {\n// \t\t//this.props.ble.stopScan(); //stop any current scans\n// \t\tconsole.log(\"scanning!\");\n// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n// \t\t//   if(result.status === \"scanResult\") {\n// \t\t//     this.devices.push(result);\n// \t\t//   }\n// \t\t//   else if(result.status !== \"scanStarted\") {\n// \t\t//     this.checkEnabled();\n// \t\t//   }\n// \t\t// });\n// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n// \t\t\tconsole.log(result);\n// \t\t});\n// \t\tawait timeout(timeout);\n// \t\t//this.props.ble.stopScan();\n// \t\tconsole.log(\"stopped scan!\");\n// \t}\n// }\n// const checkEnabled = () => {\n// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n// }\n// const timeout = (s) => {\n// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n// }\n// if (!isPlatform('cordova')) {\n// \tconsole.log(\"platform not cordova, BLE will not work!\");\n// \t//set cordova variable\n// \treturn;\n// }","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["useState","useEffect","_Bluetooth","state","setState","addDevice","devices","bluetoothInitialize","i","a","name","mac","toString","connected","console","log","connect","id"],"mappings":"AAAA,SAAgBA,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAOA,OAAO,SAASC,UAAT,GAAsB;AAE5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACfI,IAAAA,SAAS;AACT,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;AAIA,QAAMG,OAAc,GAAG,EAAvB;;AAEA,QAAMC,mBAAmB,GAAG,MAAM;AAEjC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC3B,UAAIC,CAAC,GAAG;AAACC,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,GAAG,EAAEH,CAAC,CAACI,QAAF,EAApB;AAAkCC,QAAAA,SAAS,EAAC;AAA5C,OAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ,EAF2B,CAG3B;AACA;AACD,GAPD;;AASA,QAAMa,OAAO,GAAIC,EAAD,IAAQ;AACvBH,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EADuB,CAEvB;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA,GAlCD;;AAoCA,QAAMV,SAAS,GAAG,MAAM,CACvB;AACA;AACA;AACA,GAJD;;AAMA,SACC;AAACC,IAAAA,OAAD;AAAUC,IAAAA,mBAAV;AAA+BS,IAAAA;AAA/B,GADD;AAGA;AAED,eAAed,UAAf;AAGA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG,C,CAGH;AAEC;AACA;AACA;AACA;AACA;AAEA;AACD;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEC;AAED;AACA;AAEA;AAEA;AACA;AACA;AAIE;AACD;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem'\n\nexport function _Bluetooth() {\n\n\tconst [state, setState] = useState([]);\n\tuseEffect(() => {\n\t\taddDevice();\n\t}, [state]);\n\n\tconst devices: any[] = [];\n\n\tconst bluetoothInitialize = () => {\n\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tlet a = {name: \"test\", mac: i.toString(), connected:false}\n\t\t\tconsole.log(state)\n\t\t\t//setState({found: [...state.found, a]});\n\t\t}\n\t}\n\n\tconst connect = (id) => {\n\t\tconsole.log(\"hi\");\n\t\t// const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n\n\t\t// devices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n\n\t\t// \tif(id === item.mac) {\n\t\t// \t\tlet updated = <BluetoothDeviceItem key={item.mac} mac={item.mac} name={item.name} onClick={this.connect} connectingState={'connecting'}></BluetoothDeviceItem>\t\n\t\t// \t\tbluetoothDevices[currentDevices.findIndex(function(data){ return data.id === id })] = updated;\n\t\t// \t}\n\n\t\t// });\n\n\t\t// bluetoothDevices.forEach(element => {\n\n\t\t// \tconsole.log(element);\n\n\t\t// \tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n\t\t// \t\tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n\t\t// \t\tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n\n\t\t// \t\tindexes.forEach(indx => {\n\t\t// \t\t\tbluetoothDevices[indx] = updated;\n\t\t// \t\t});\n\t\t// \t}\n\n\n\t\t// \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n\t\t\t\n\t\t// \t//updating the clicked device to connecting state\n\n\t\t// \tconsole.log(element);\n\n\t\t// });\n\t}\n\n\tconst addDevice = () => {\n\t\t//let d = state.found[state.found.length - 1]\n\t\t//console.log(d);\n\t\t//devices.push(<BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} connectingState={d.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>);\n\t}\n\n\treturn (\n\t\t{devices, bluetoothInitialize, connect}\n\t);\n}\n\nexport default _Bluetooth;\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n //this.checkEnabled();\n\n\t\t// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t\t//   if(result.status === \"disabled\") {\n\t\t//     this.checkEnabled();\n\t\t//   }\n\t\t// });\n\n\t\t// const scan = async (timeout) => {\n\t// \tif (!isCordova) {\n\t// \t\t//this.props.ble.stopScan(); //stop any current scans\n\n\t// \t\tconsole.log(\"scanning!\");\n\n\t// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t// \t\t//   if(result.status === \"scanResult\") {\n\t// \t\t//     this.devices.push(result);\n\t// \t\t//   }\n\t// \t\t//   else if(result.status !== \"scanStarted\") {\n\t// \t\t//     this.checkEnabled();\n\t// \t\t//   }\n\t// \t\t// });\n\n\t// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n\t// \t\t\tconsole.log(result);\n\t// \t\t});\n\n\t// \t\tawait timeout(timeout);\n\t// \t\t//this.props.ble.stopScan();\n\n\t// \t\tconsole.log(\"stopped scan!\");\n\t// \t}\n\t// }\n\n\t\t// const checkEnabled = () => {\n\n\t// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\n\t// }\n\n\t// const timeout = (s) => {\n\t// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t// }\n\n\n\n\t\t\t// if (!isPlatform('cordova')) {\n\t\t// \tconsole.log(\"platform not cordova, BLE will not work!\");\n\t\t// \t//set cordova variable\n\t\t// \treturn;\n\t\t// }\n\n\n"]},"metadata":{},"sourceType":"module"}