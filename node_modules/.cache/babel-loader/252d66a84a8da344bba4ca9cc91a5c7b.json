{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\nimport React from 'react';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n  const state = {\n    found: []\n  };\n  const devices = [];\n\n  const bluetoothInitialize = () => {\n    for (let i = 0; i < 5; i++) {\n      let a = {\n        name: \"test\",\n        mac: i.toString(),\n        connected: false\n      };\n      state.found = [...state.found, a];\n      createDeviceItem();\n    }\n\n    console.log(state.found);\n  };\n\n  const connect = id => {\n    const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n    devices.forEach(item => {\n      //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n      if (id === item.props.mac) {\n        updateDeviceItemState(currentDevices.findIndex(function (data) {\n          return data.id === id;\n        }), 'connecting');\n        console.log(item);\n      }\n\n      if ((item.props.connectingState === 'connecting' || item.props.connectingState === 'connected') && item.props.mac !== id) {\n        let indexes = devices.map((elm, idx) => elm.props.mac !== id ? idx : '').filter(String);\n        indexes.forEach(index => {\n          updateDeviceItemState(index, 'not_connected');\n        });\n      }\n    }); // bluetoothDevices.forEach(element => {\n    // \tconsole.log(element);\n    // if ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n    // \tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n    // \tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n    // \tindexes.forEach(indx => {\n    // \t\tbluetoothDevices[indx] = updated;\n    // \t});\n    // \t}\n    // \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n    // \t//updating the clicked device to connecting state\n    // \tconsole.log(element);\n    // });\n  };\n\n  const createDeviceItem = () => {\n    console.log(state.found);\n    let d = state.found[state.found.length - 1];\n    devices.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      key: d.mac,\n      mac: d.mac,\n      name: d.name,\n      onClick: id => connect(id),\n      connectingState: d.connected ? 'connected' : 'not_connected',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }\n    }));\n  };\n\n  const updateDeviceItemState = (index, connectingState) => {\n    let d = state.found[index];\n    devices[index] = /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      key: d.mac,\n      mac: d.mac,\n      name: d.name,\n      onClick: id => connect(id),\n      connectingState: connectingState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }\n    });\n  };\n\n  return {\n    devices,\n    bluetoothInitialize,\n    connect\n  };\n};\n\nexport default _Bluetooth;\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n} //this.checkEnabled();\n// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n//   if(result.status === \"disabled\") {\n//     this.checkEnabled();\n//   }\n// });\n// const scan = async (timeout) => {\n// \tif (!isCordova) {\n// \t\t//this.props.ble.stopScan(); //stop any current scans\n// \t\tconsole.log(\"scanning!\");\n// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n// \t\t//   if(result.status === \"scanResult\") {\n// \t\t//     this.devices.push(result);\n// \t\t//   }\n// \t\t//   else if(result.status !== \"scanStarted\") {\n// \t\t//     this.checkEnabled();\n// \t\t//   }\n// \t\t// });\n// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n// \t\t\tconsole.log(result);\n// \t\t});\n// \t\tawait timeout(timeout);\n// \t\t//this.props.ble.stopScan();\n// \t\tconsole.log(\"stopped scan!\");\n// \t}\n// }\n// const checkEnabled = () => {\n// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n// }\n// const timeout = (s) => {\n// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n// }\n// if (!isPlatform('cordova')) {\n// \tconsole.log(\"platform not cordova, BLE will not work!\");\n// \t//set cordova variable\n// \treturn;\n// }","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","BluetoothDeviceItem","_Bluetooth","state","found","devices","bluetoothInitialize","i","a","name","mac","toString","connected","createDeviceItem","console","log","connect","id","currentDevices","Array","prototype","slice","call","document","getElementsByClassName","children","forEach","item","props","updateDeviceItemState","findIndex","data","connectingState","indexes","map","elm","idx","filter","String","index","d","length","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem'\n\nconst _Bluetooth = () => {\n\n\tconst state: {found: any[]} = {found: []}\n\tconst devices: any[] = [];\n\n\tconst bluetoothInitialize = () => {\n\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tlet a = {name: \"test\", mac: i.toString(), connected:false}\n\t\t\tstate.found = [...state.found, a];\n\t\t\tcreateDeviceItem();\n\t\t}\n\t\tconsole.log(state.found);\n\t}\n\n\tconst connect = (id) => {\n\t\tconst currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n\n\t\tdevices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n\t\t\tif(id === item.props.mac) {\n\t\t\t\tupdateDeviceItemState(currentDevices.findIndex(function(data){ return data.id === id }), 'connecting');\n\t\t\t\tconsole.log(item);\n\t\t\t}\n\n\t\t\tif ((item.props.connectingState === 'connecting' || item.props.connectingState === 'connected') && item.props.mac !== id) {\n\t\t\t\tlet indexes = devices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n\n\t\t\t\tindexes.forEach(index => {\n\t\t\t\t\tupdateDeviceItemState(index, 'not_connected');\n\t\t\t\t});\n\t\t\t}\n\n\t\t});\n\t\t// bluetoothDevices.forEach(element => {\n\n\t\t// \tconsole.log(element);\n\n\t\t\t// if ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n\t\t\t// \tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n\t\t\t// \tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n\n\t\t\t// \tindexes.forEach(indx => {\n\t\t\t// \t\tbluetoothDevices[indx] = updated;\n\t\t\t// \t});\n\t\t// \t}\n\n\n\t\t// \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n\t\t\t\n\t\t// \t//updating the clicked device to connecting state\n\n\t\t// \tconsole.log(element);\n\n\t\t// });\n\t}\n\n\tconst createDeviceItem = () => {\n\t\tconsole.log(state.found);\n\t\tlet d = state.found[state.found.length - 1]\n\t\tdevices.push(<BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} connectingState={d.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>);\n\t}\n\tconst updateDeviceItemState = (index, connectingState) => {\n\t\tlet d = state.found[index];\n\t\tdevices[index] = <BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} connectingState={connectingState}></BluetoothDeviceItem>;\n\t}\n\n\treturn (\n\t\t{devices, bluetoothInitialize, connect}\n\t);\n}\n\nexport default _Bluetooth;\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n //this.checkEnabled();\n\n\t\t// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t\t//   if(result.status === \"disabled\") {\n\t\t//     this.checkEnabled();\n\t\t//   }\n\t\t// });\n\n\t\t// const scan = async (timeout) => {\n\t// \tif (!isCordova) {\n\t// \t\t//this.props.ble.stopScan(); //stop any current scans\n\n\t// \t\tconsole.log(\"scanning!\");\n\n\t// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t// \t\t//   if(result.status === \"scanResult\") {\n\t// \t\t//     this.devices.push(result);\n\t// \t\t//   }\n\t// \t\t//   else if(result.status !== \"scanStarted\") {\n\t// \t\t//     this.checkEnabled();\n\t// \t\t//   }\n\t// \t\t// });\n\n\t// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n\t// \t\t\tconsole.log(result);\n\t// \t\t});\n\n\t// \t\tawait timeout(timeout);\n\t// \t\t//this.props.ble.stopScan();\n\n\t// \t\tconsole.log(\"stopped scan!\");\n\t// \t}\n\t// }\n\n\t\t// const checkEnabled = () => {\n\n\t// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\n\t// }\n\n\t// const timeout = (s) => {\n\t// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t// }\n\n\n\n\t\t\t// if (!isPlatform('cordova')) {\n\t\t// \tconsole.log(\"platform not cordova, BLE will not work!\");\n\t\t// \t//set cordova variable\n\t\t// \treturn;\n\t\t// }\n\n\n"]},"metadata":{},"sourceType":"module"}