{"ast":null,"code":"/*global cordova*/\nmodule.exports = {\n  connect: function (macAddress, success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"connect\", [macAddress]);\n  },\n  // Android only - see http://goo.gl/1mFjZY\n  connectInsecure: function (macAddress, success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"connectInsecure\", [macAddress]);\n  },\n  disconnect: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"disconnect\", []);\n  },\n  // list bound devices\n  list: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"list\", []);\n  },\n  isEnabled: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"isEnabled\", []);\n  },\n  isConnected: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"isConnected\", []);\n  },\n  // the number of bytes of data available to read is passed to the success function\n  available: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"available\", []);\n  },\n  // read all the data in the buffer\n  read: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"read\", []);\n  },\n  // reads the data in the buffer up to and including the delimiter\n  readUntil: function (delimiter, success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"readUntil\", [delimiter]);\n  },\n  // writes data to the bluetooth serial port\n  // data can be an ArrayBuffer, string, integer array, or Uint8Array\n  write: function (data, success, failure) {\n    // convert to ArrayBuffer\n    if (typeof data === 'string') {\n      data = stringToArrayBuffer(data);\n    } else if (data instanceof Array) {\n      // assuming array of interger\n      data = new Uint8Array(data).buffer;\n    } else if (data instanceof Uint8Array) {\n      data = data.buffer;\n    }\n\n    cordova.exec(success, failure, \"BluetoothSerial\", \"write\", [data]);\n  },\n  // calls the success callback when new data is available\n  subscribe: function (delimiter, success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"subscribe\", [delimiter]);\n  },\n  // removes data subscription\n  unsubscribe: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"unsubscribe\", []);\n  },\n  // calls the success callback when new data is available with an ArrayBuffer\n  subscribeRawData: function (success, failure) {\n    successWrapper = function (data) {\n      // Windows Phone flattens an array of one into a number which\n      // breaks the API. Stuff it back into an ArrayBuffer.\n      if (typeof data === 'number') {\n        var a = new Uint8Array(1);\n        a[0] = data;\n        data = a.buffer;\n      }\n\n      success(data);\n    };\n\n    cordova.exec(successWrapper, failure, \"BluetoothSerial\", \"subscribeRaw\", []);\n  },\n  // removes data subscription\n  unsubscribeRawData: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"unsubscribeRaw\", []);\n  },\n  // clears the data buffer\n  clear: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"clear\", []);\n  },\n  // reads the RSSI of the *connected* peripherial\n  readRSSI: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"readRSSI\", []);\n  },\n  showBluetoothSettings: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"showBluetoothSettings\", []);\n  },\n  enable: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"enable\", []);\n  },\n  discoverUnpaired: function (success, failure) {\n    cordova.exec(success, failure, \"BluetoothSerial\", \"discoverUnpaired\", []);\n  },\n  setDeviceDiscoveredListener: function (notify) {\n    if (typeof notify != 'function') throw 'BluetoothSerial.setDeviceDiscoveredListener: Callback not a function';\n    cordova.exec(notify, null, \"BluetoothSerial\", \"setDeviceDiscoveredListener\", []);\n  },\n  clearDeviceDiscoveredListener: function () {\n    cordova.exec(null, null, \"BluetoothSerial\", \"clearDeviceDiscoveredListener\", []);\n  },\n  setName: function (newName) {\n    cordova.exec(null, null, \"BluetoothSerial\", \"setName\", [newName]);\n  },\n  setDiscoverable: function (discoverableDuration) {\n    cordova.exec(null, null, \"BluetoothSerial\", \"setDiscoverable\", [discoverableDuration]);\n  }\n};\n\nvar stringToArrayBuffer = function (str) {\n  var ret = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    ret[i] = str.charCodeAt(i);\n  }\n\n  return ret.buffer;\n};","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/node_modules/cordova-plugin-bluetooth-serial/www/bluetoothSerial.js"],"names":["module","exports","connect","macAddress","success","failure","cordova","exec","connectInsecure","disconnect","list","isEnabled","isConnected","available","read","readUntil","delimiter","write","data","stringToArrayBuffer","Array","Uint8Array","buffer","subscribe","unsubscribe","subscribeRawData","successWrapper","a","unsubscribeRawData","clear","readRSSI","showBluetoothSettings","enable","discoverUnpaired","setDeviceDiscoveredListener","notify","clearDeviceDiscoveredListener","setName","newName","setDiscoverable","discoverableDuration","str","ret","length","i","charCodeAt"],"mappings":"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","sourcesContent":["/*global cordova*/\nmodule.exports = {\n\n    connect: function (macAddress, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"connect\", [macAddress]);\n    },\n\n    // Android only - see http://goo.gl/1mFjZY\n    connectInsecure: function (macAddress, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"connectInsecure\", [macAddress]);\n    },\n\n    disconnect: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"disconnect\", []);\n    },\n\n    // list bound devices\n    list: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"list\", []);\n    },\n\n    isEnabled: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"isEnabled\", []);\n    },\n\n    isConnected: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"isConnected\", []);\n    },\n\n    // the number of bytes of data available to read is passed to the success function\n    available: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"available\", []);\n    },\n\n    // read all the data in the buffer\n    read: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"read\", []);\n    },\n\n    // reads the data in the buffer up to and including the delimiter\n    readUntil: function (delimiter, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"readUntil\", [delimiter]);\n    },\n\n    // writes data to the bluetooth serial port\n    // data can be an ArrayBuffer, string, integer array, or Uint8Array\n    write: function (data, success, failure) {\n\n        // convert to ArrayBuffer\n        if (typeof data === 'string') {\n            data = stringToArrayBuffer(data);\n        } else if (data instanceof Array) {\n            // assuming array of interger\n            data = new Uint8Array(data).buffer;\n        } else if (data instanceof Uint8Array) {\n            data = data.buffer;\n        }\n\n        cordova.exec(success, failure, \"BluetoothSerial\", \"write\", [data]);\n    },\n\n    // calls the success callback when new data is available\n    subscribe: function (delimiter, success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"subscribe\", [delimiter]);\n    },\n\n    // removes data subscription\n    unsubscribe: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"unsubscribe\", []);\n    },\n\n    // calls the success callback when new data is available with an ArrayBuffer\n    subscribeRawData: function (success, failure) {\n\n        successWrapper = function(data) {\n            // Windows Phone flattens an array of one into a number which\n            // breaks the API. Stuff it back into an ArrayBuffer.\n            if (typeof data === 'number') {\n                var a = new Uint8Array(1);\n                a[0] = data;\n                data = a.buffer;\n            }\n            success(data);\n        };\n        cordova.exec(successWrapper, failure, \"BluetoothSerial\", \"subscribeRaw\", []);\n    },\n\n    // removes data subscription\n    unsubscribeRawData: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"unsubscribeRaw\", []);\n    },\n\n    // clears the data buffer\n    clear: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"clear\", []);\n    },\n\n    // reads the RSSI of the *connected* peripherial\n    readRSSI: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"readRSSI\", []);\n    },\n\n    showBluetoothSettings: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"showBluetoothSettings\", []);\n    },\n\n    enable: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"enable\", []);\n    },\n\n    discoverUnpaired: function (success, failure) {\n        cordova.exec(success, failure, \"BluetoothSerial\", \"discoverUnpaired\", []);\n    },\n\n    setDeviceDiscoveredListener: function (notify) {\n        if (typeof notify != 'function')\n            throw 'BluetoothSerial.setDeviceDiscoveredListener: Callback not a function';\n\n        cordova.exec(notify, null, \"BluetoothSerial\", \"setDeviceDiscoveredListener\", []);\n    },\n\n    clearDeviceDiscoveredListener: function () {\n        cordova.exec(null, null, \"BluetoothSerial\", \"clearDeviceDiscoveredListener\", []);\n    },\n\n    setName: function (newName) {\n        cordova.exec(null, null, \"BluetoothSerial\", \"setName\", [newName]);\n    },\n\n    setDiscoverable: function (discoverableDuration) {\n        cordova.exec(null, null, \"BluetoothSerial\", \"setDiscoverable\", [discoverableDuration]);\n    }\n\n\n};\n\nvar stringToArrayBuffer = function(str) {\n    var ret = new Uint8Array(str.length);\n    for (var i = 0; i < str.length; i++) {\n        ret[i] = str.charCodeAt(i);\n    }\n    return ret.buffer;\n};\n"]},"metadata":{},"sourceType":"script"}