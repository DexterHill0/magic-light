{"ast":null,"code":"export const _Bluetooth = () => {\n  const bluetoothInitialize = () => {\n    for (let i = 0; i < 5; i++) {//let a = {name: \"test\", mac: i.toString(), connected:false}\n      //bluetoothDevices.push(<BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={(id) => this.connect(id)} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>);\n    }\n  };\n\n  const connect = id => {\n    console.log(\"hi\"); // const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n    // devices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n    // \tif(id === item.mac) {\n    // \t\tlet updated = <BluetoothDeviceItem key={item.mac} mac={item.mac} name={item.name} onClick={this.connect} connectingState={'connecting'}></BluetoothDeviceItem>\t\n    // \t\tbluetoothDevices[currentDevices.findIndex(function(data){ return data.id === id })] = updated;\n    // \t}\n    // });\n    // bluetoothDevices.forEach(element => {\n    // \tconsole.log(element);\n    // \tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n    // \t\tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n    // \t\tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String)\n    // \t\tindexes.forEach(indx => {\n    // \t\t\tbluetoothDevices[indx] = updated;\n    // \t\t});\n    // \t}\n    // \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n    // \t//updating the clicked device to connecting state\n    // \tconsole.log(element);\n    // });\n  };\n\n  return {\n    bluetoothInitialize,\n    connect\n  };\n};\nexport default _Bluetooth;","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["_Bluetooth","bluetoothInitialize","i","connect","id","console","log"],"mappings":"AAKA,OAAO,MAAMA,UAAU,GAAG,MAAM;AAE/B,QAAMC,mBAAmB,GAAG,MAAM;AAEjC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B,CAC3B;AACA;AACA;AACD,GAND;;AAQA,QAAMC,OAAO,GAAIC,EAAD,IAAQ;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EADuB,CAEvB;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA,GAlCD;;AAoCA,SACC;AAACL,IAAAA,mBAAD;AAAsBE,IAAAA;AAAtB,GADD;AAGA,CAjDM;AAmDP,eAAeH,UAAf","sourcesContent":["import React from 'react';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nexport const _Bluetooth = () => {\n\n\tconst bluetoothInitialize = () => {\n\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\t//let a = {name: \"test\", mac: i.toString(), connected:false}\n\t\t\t//bluetoothDevices.push(<BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={(id) => this.connect(id)} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>);\n\t\t}\n\t}\n\n\tconst connect = (id) => {\n\t\tconsole.log(\"hi\");\n\t\t// const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n\n\t\t// devices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n\n\t\t// \tif(id === item.mac) {\n\t\t// \t\tlet updated = <BluetoothDeviceItem key={item.mac} mac={item.mac} name={item.name} onClick={this.connect} connectingState={'connecting'}></BluetoothDeviceItem>\t\n\t\t// \t\tbluetoothDevices[currentDevices.findIndex(function(data){ return data.id === id })] = updated;\n\t\t// \t}\n\n\t\t// });\n\n\t\t// bluetoothDevices.forEach(element => {\n\n\t\t// \tconsole.log(element);\n\n\t\t// \tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n\t\t// \t\tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n\t\t// \t\tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String)\n\n\t\t// \t\tindexes.forEach(indx => {\n\t\t// \t\t\tbluetoothDevices[indx] = updated;\n\t\t// \t\t});\n\t\t// \t}\n\n\n\t\t// \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n\t\t\t\n\t\t// \t//updating the clicked device to connecting state\n\n\t\t// \tconsole.log(element);\n\n\t\t// });\n\t}\n\n\treturn (\n\t\t{bluetoothInitialize, connect}\n\t);\n}\n\nexport default _Bluetooth;\n"]},"metadata":{},"sourceType":"module"}