{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { IonIcon, IonSpinner, IonItem, IonAvatar, IonLabel } from '@ionic/react';\nimport { bluetoothOutline, checkmarkOutline, closeOutline } from 'ionicons/icons';\nimport './Bluetooth.css';\n\nclass Parent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      connectingState: 'not_connected'\n    };\n  }\n\n}\n\nclass Bluetooth extends Parent {\n  test() {\n    console.log(this.state.connectingState);\n  } // const scan = async (timeout) => {\n  // \tif (!isCordova) {\n  // \t\t//this.props.ble.stopScan(); //stop any current scans\n  // \t\tconsole.log(\"scanning!\");\n  // \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n  // \t\t//   if(result.status === \"scanResult\") {\n  // \t\t//     this.devices.push(result);\n  // \t\t//   }\n  // \t\t//   else if(result.status !== \"scanStarted\") {\n  // \t\t//     this.checkEnabled();\n  // \t\t//   }\n  // \t\t// });\n  // \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n  // \t\t\tconsole.log(result);\n  // \t\t});\n  // \t\tawait timeout(timeout);\n  // \t\t//this.props.ble.stopScan();\n  // \t\tconsole.log(\"stopped scan!\");\n  // \t}\n  // }\n  // const bluetoothInitialize = () => {\n  // \tfor (let i = 0; i < 5; i++) {\n  // \t\tlet a = <BluetoothDeviceItem key={i} mac={i.toString()} name={\"device_\" + i} connectingState={'not_connected'}></BluetoothDeviceItem>\n  // \t\tbluetoothDevices.push(a);\n  // \t}\n  // \tif (!isPlatform('cordova')) {\n  // \t\tconsole.log(\"platform not cordova, BLE will not work!\");\n  // \t\tsetIsCordova(true);\n  // \t\treturn;\n  // \t}\n  // \tcheckEnabled();\n  // \t// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n  // \t//   if(result.status === \"disabled\") {\n  // \t//     this.checkEnabled();\n  // \t//   }\n  // \t// });\n  // }\n  // const connect = (id) => {\n  // \tbluetoothDevices.forEach(element => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n  // \t\tlet state = element;\n  // \t\tconsole.log(state);\n  // \t\tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n  // \t\t\tconst currDev = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\"));\n  // \t\t\t//let updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={\"hf\"} onClick={this.connect}></BluetoothDeviceItem>\n  // \t\t\t//currDev[Array.prototype.slice.call(currDev[0].children).findIndex(function(data){ return data.id === id })] = updated;\n  // \t\t}\n  // \t\tif (element.props.connectingState === 'connecting') {\n  // \t\t\t//stop the connection / disconnect\n  // \t\t}\n  // \t\telse if (element.props.connectingState === 'connected') {\n  // \t\t\t//disconnect device\n  // \t\t}\n  // \t});\n  // }\n  // const checkEnabled = () => {\n  // \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n  // \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n  // }\n  // const timeout = (s) => {\n  // \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n  // }\n\n\n}\n\nexport default Bluetooth; //https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\n\nconst BluetoothDeviceItem = (BluetoothDeviceItemProps, {}) => {\n  const [connectingState, setConnectingState] = useState(BluetoothDeviceItemProps.connectingState);\n  useEffect(() => {\n    stateChangeCallback();\n  }, [connectingState]);\n  const {\n    onClick\n  } = BluetoothDeviceItemProps;\n\n  const stateChangeCallback = () => {\n    const elementIndex = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children).findIndex(function (data) {\n      return data.id === BluetoothDeviceItemProps.mac;\n    });\n    const connectingIcon = document.getElementsByClassName(\"connecting-icons\")[elementIndex];\n    const spinnerIcon = document.getElementsByClassName(\"connecting-spinner\")[elementIndex][\"style\"];\n\n    switch (connectingState) {\n      case 'not_connected':\n        connectingIcon[\"style\"][\"color\"] = \"var(--ion-color-danger)\";\n        connectingIcon[\"icon\"] = closeOutline;\n        break;\n\n      case 'connecting':\n        spinnerIcon.opacity = 1;\n        connectingIcon[\"style\"][\"opacity\"] = 0;\n        break;\n\n      case 'connected':\n        spinnerIcon.opactiy = 0;\n        connectingIcon[\"style\"][\"opacity\"] = 1;\n        connectingIcon[\"style\"][\"color\"] = \"var(--ion-color-success)\";\n        connectingIcon[\"icon\"] = checkmarkOutline;\n    }\n  };\n\n  const wait = async () => {\n    setConnectingState('connecting');\n    const ret = await onClick(connectingState, BluetoothDeviceItemProps.mac);\n  };\n\n  return /*#__PURE__*/React.createElement(IonItem, {\n    lines: \"none\",\n    class: \"item-container\",\n    onClick: wait,\n    id: BluetoothDeviceItemProps.mac,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(IonAvatar, {\n    slot: \"start\",\n    class: \"bluetooth-icon-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(IonIcon, {\n    icon: bluetoothOutline,\n    class: \"bluetooth-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(IonAvatar, {\n    slot: \"end\",\n    class: \"connecting-icons-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(IonIcon, {\n    icon: closeOutline,\n    class: \"connecting-icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(IonSpinner, {\n    name: \"dots\",\n    class: \"connecting-spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(IonLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"device-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, BluetoothDeviceItemProps.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"device-mac\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 5\n    }\n  }, BluetoothDeviceItemProps.mac)));\n};\n\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n}","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","useState","useEffect","IonIcon","IonSpinner","IonItem","IonAvatar","IonLabel","bluetoothOutline","checkmarkOutline","closeOutline","Parent","Component","state","connectingState","Bluetooth","test","console","log","BluetoothDeviceItem","BluetoothDeviceItemProps","setConnectingState","stateChangeCallback","onClick","elementIndex","Array","prototype","slice","call","document","getElementsByClassName","children","findIndex","data","id","mac","connectingIcon","spinnerIcon","opacity","opactiy","wait","ret","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { IonIcon, IonSpinner, IonItem, IonAvatar, IonLabel, isPlatform } from '@ionic/react';\nimport { bluetoothOutline, checkmarkOutline, closeOutline } from 'ionicons/icons';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nimport './Bluetooth.css';\nimport { bluetoothDevices } from '../../globals/globals';\n\ninterface BluetoothDeviceItemProps {\n\tname: string;\n\tmac: string;\n}\ninterface State {\n\tconnectingState: string;\n}\n\nclass Parent extends React.Component<{}, State> {\n\tstate = {\n\t\tconnectingState: 'not_connected'\n\t}\n}\n\nclass Bluetooth extends Parent{\n\n\ttest() {\n\t\tconsole.log(this.state.connectingState);\n\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t// const scan = async (timeout) => {\n\t// \tif (!isCordova) {\n\t// \t\t//this.props.ble.stopScan(); //stop any current scans\n\n\t// \t\tconsole.log(\"scanning!\");\n\n\t// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t// \t\t//   if(result.status === \"scanResult\") {\n\t// \t\t//     this.devices.push(result);\n\t// \t\t//   }\n\t// \t\t//   else if(result.status !== \"scanStarted\") {\n\t// \t\t//     this.checkEnabled();\n\t// \t\t//   }\n\t// \t\t// });\n\n\t// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n\t// \t\t\tconsole.log(result);\n\t// \t\t});\n\n\t// \t\tawait timeout(timeout);\n\t// \t\t//this.props.ble.stopScan();\n\n\t// \t\tconsole.log(\"stopped scan!\");\n\t// \t}\n\t// }\n\n\t// const bluetoothInitialize = () => {\n\n\t// \tfor (let i = 0; i < 5; i++) {\n\t// \t\tlet a = <BluetoothDeviceItem key={i} mac={i.toString()} name={\"device_\" + i} connectingState={'not_connected'}></BluetoothDeviceItem>\n\n\t// \t\tbluetoothDevices.push(a);\n\t// \t}\n\n\t// \tif (!isPlatform('cordova')) {\n\t// \t\tconsole.log(\"platform not cordova, BLE will not work!\");\n\t// \t\tsetIsCordova(true);\n\t// \t\treturn;\n\t// \t}\n\n\t// \tcheckEnabled();\n\n\t// \t// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t// \t//   if(result.status === \"disabled\") {\n\t// \t//     this.checkEnabled();\n\t// \t//   }\n\t// \t// });\n\n\t// }\n\n\t// const connect = (id) => {\n\t// \tbluetoothDevices.forEach(element => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n\t// \t\tlet state = element;\n\t// \t\tconsole.log(state);\n\t// \t\tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n\t// \t\t\tconst currDev = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\"));\n\t// \t\t\t//let updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={\"hf\"} onClick={this.connect}></BluetoothDeviceItem>\n\n\t// \t\t\t//currDev[Array.prototype.slice.call(currDev[0].children).findIndex(function(data){ return data.id === id })] = updated;\n\t// \t\t}\n\t// \t\tif (element.props.connectingState === 'connecting') {\n\t// \t\t\t//stop the connection / disconnect\n\t// \t\t}\n\t// \t\telse if (element.props.connectingState === 'connected') {\n\t// \t\t\t//disconnect device\n\t// \t\t}\n\t// \t});\n\t// }\n\n\n\t// const checkEnabled = () => {\n\n\t// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\n\t// }\n\n\t// const timeout = (s) => {\n\t// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t// }\n}\nexport default Bluetooth;\n\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst BluetoothDeviceItem = (BluetoothDeviceItemProps, { }) => {\n\n\tconst [connectingState, setConnectingState] = useState(BluetoothDeviceItemProps.connectingState);\n\tuseEffect(() => {\n\t\tstateChangeCallback();\n\t}, [connectingState]);\n\n\tconst { onClick } = BluetoothDeviceItemProps;\n\n\tconst stateChangeCallback = () => {\n\t\tconst elementIndex = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children).findIndex(function (data) { return data.id === BluetoothDeviceItemProps.mac })\n\t\tconst connectingIcon = document.getElementsByClassName(\"connecting-icons\")[elementIndex];\n\t\tconst spinnerIcon = document.getElementsByClassName(\"connecting-spinner\")[elementIndex][\"style\"];\n\n\t\tswitch (connectingState) {\n\t\t\tcase 'not_connected':\n\t\t\t\tconnectingIcon[\"style\"][\"color\"] = \"var(--ion-color-danger)\";\n\t\t\t\tconnectingIcon[\"icon\"] = closeOutline;\n\t\t\t\tbreak;\n\t\t\tcase 'connecting':\n\t\t\t\tspinnerIcon.opacity = 1;\n\t\t\t\tconnectingIcon[\"style\"][\"opacity\"] = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'connected':\n\t\t\t\tspinnerIcon.opactiy = 0;\n\t\t\t\tconnectingIcon[\"style\"][\"opacity\"] = 1;\n\t\t\t\tconnectingIcon[\"style\"][\"color\"] = \"var(--ion-color-success)\";\n\t\t\t\tconnectingIcon[\"icon\"] = checkmarkOutline;\n\t\t}\n\t}\n\n\tconst wait = async () => {\n\t\tsetConnectingState('connecting');\n\n\t\tconst ret = await onClick(connectingState, BluetoothDeviceItemProps.mac);\n\t}\n\n\treturn (\n\t\t<IonItem lines=\"none\" class=\"item-container\" onClick={wait} id={BluetoothDeviceItemProps.mac}>\n\t\t\t<IonAvatar slot=\"start\" class=\"bluetooth-icon-container\">\n\t\t\t\t<IonIcon icon={bluetoothOutline} class=\"bluetooth-icon\"></IonIcon>\n\t\t\t</IonAvatar>\n\t\t\t<IonAvatar slot=\"end\" class=\"connecting-icons-container\">\n\t\t\t\t<IonIcon icon={closeOutline} class=\"connecting-icons\"></IonIcon>\n\t\t\t\t<IonSpinner name=\"dots\" class=\"connecting-spinner\"></IonSpinner>\n\t\t\t</IonAvatar>\n\t\t\t<IonLabel>\n\t\t\t\t<div className=\"device-name\">{BluetoothDeviceItemProps.name}</div>\n\t\t\t\t<div className=\"device-mac\">{BluetoothDeviceItemProps.mac}</div>\n\t\t\t</IonLabel>\n\t\t</IonItem>\n\t);\n}\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n"]},"metadata":{},"sourceType":"module"}