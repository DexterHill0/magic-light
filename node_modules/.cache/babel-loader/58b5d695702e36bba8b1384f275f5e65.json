{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\nimport React from 'react';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n  const devices = {\n    found: []\n  };\n  let states = {};\n  const deviceItems = [];\n\n  const bluetoothInitialize = () => {\n    for (let i = 0; i < 5; i++) {\n      let a = {\n        name: \"test\",\n        mac: i.toString(),\n        connected: false\n      };\n      devices.found = [...devices.found, a];\n      createDeviceItem();\n    }\n  };\n\n  const connect = id => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n      if (id === item.props.mac) {\n        updateDeviceItemState(item.props.mac, 'connecting');\n      }\n\n      if ((item.props.connectingState === 'connecting' || item.props.connectingState === 'connected') && item.props.mac !== id) {\n        console.log(item.props.mac);\n        updateDeviceItemState(item.props.mac, 'not_connected'); // let indexes = deviceItems.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n        // indexes.forEach(index => {\n        // });\n      }\n    });\n  };\n\n  const createDeviceItem = () => {\n    let d = devices.found[devices.found.length - 1];\n    states = { ...states,\n      [d.mac]: d.connected ? 'connected' : 'not_connected'\n    };\n    deviceItems.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      key: d.mac,\n      mac: d.mac,\n      name: d.name,\n      onClick: id => connect(id),\n      setState: () => {\n        return states[d.mac];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 20\n      }\n    }));\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState; //<BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} connectingState={connectingState}></BluetoothDeviceItem>;\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize,\n    connect\n  };\n};\n\nexport default _Bluetooth;\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n} //this.checkEnabled();\n// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n//   if(result.status === \"disabled\") {\n//     this.checkEnabled();\n//   }\n// });\n// const scan = async (timeout) => {\n// \tif (!isCordova) {\n// \t\t//this.props.ble.stopScan(); //stop any current scans\n// \t\tconsole.log(\"scanning!\");\n// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n// \t\t//   if(result.status === \"scanResult\") {\n// \t\t//     this.devices.push(result);\n// \t\t//   }\n// \t\t//   else if(result.status !== \"scanStarted\") {\n// \t\t//     this.checkEnabled();\n// \t\t//   }\n// \t\t// });\n// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n// \t\t\tconsole.log(result);\n// \t\t});\n// \t\tawait timeout(timeout);\n// \t\t//this.props.ble.stopScan();\n// \t\tconsole.log(\"stopped scan!\");\n// \t}\n// }\n// const checkEnabled = () => {\n// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n// }\n// const timeout = (s) => {\n// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n// }\n// if (!isPlatform('cordova')) {\n// \tconsole.log(\"platform not cordova, BLE will not work!\");\n// \t//set cordova variable\n// \treturn;\n// }","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","BluetoothDeviceItem","_Bluetooth","devices","found","states","deviceItems","bluetoothInitialize","i","a","name","mac","toString","connected","createDeviceItem","connect","id","forEach","item","props","updateDeviceItemState","connectingState","console","log","d","length","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\nimport { IonList, } from '@ionic/react';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem'\n;\n\nconst _Bluetooth = () => {\n\n\tconst devices: {found: any[]} = {found: []}\n\tlet states: {} = {}\n\tconst deviceItems: any[] = [];\n\n\tconst bluetoothInitialize = () => {\n\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tlet a = {name: \"test\", mac: i.toString(), connected:false}\n\t\t\tdevices.found = [...devices.found, a];\n\t\t\tcreateDeviceItem();\n\t\t}\n\t}\n\n\tconst connect = (id) => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n\t\t\tif(id === item.props.mac) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'connecting');\n\t\t\t}\n\n\t\t\t\n\t\t\tif ((item.props.connectingState === 'connecting' || item.props.connectingState === 'connected') && item.props.mac !== id) {\n\t\t\t\tconsole.log(item.props.mac);\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t\t// let indexes = deviceItems.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n\n\t\t\t\t// indexes.forEach(index => {\n\t\t\t\t\t\n\t\t\t\t// });\n\t\t\t}\n\n\t\t});\n\t}\n\n\tconst createDeviceItem = () => {\n\t\tlet d = devices.found[devices.found.length - 1]\n\t\tstates = {...states, [d.mac]: d.connected ? 'connected' : 'not_connected'}\n\t\tdeviceItems.push(<BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} setState={() => {return states[d.mac]}}></BluetoothDeviceItem>);\n\t}\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;//<BluetoothDeviceItem key={d.mac} mac={d.mac} name={d.name} onClick={(id) => connect(id)} connectingState={connectingState}></BluetoothDeviceItem>;\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize, connect}\n\t);\n}\nexport default _Bluetooth;\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n //this.checkEnabled();\n\n\t\t// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t\t//   if(result.status === \"disabled\") {\n\t\t//     this.checkEnabled();\n\t\t//   }\n\t\t// });\n\n\t\t// const scan = async (timeout) => {\n\t// \tif (!isCordova) {\n\t// \t\t//this.props.ble.stopScan(); //stop any current scans\n\n\t// \t\tconsole.log(\"scanning!\");\n\n\t// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t// \t\t//   if(result.status === \"scanResult\") {\n\t// \t\t//     this.devices.push(result);\n\t// \t\t//   }\n\t// \t\t//   else if(result.status !== \"scanStarted\") {\n\t// \t\t//     this.checkEnabled();\n\t// \t\t//   }\n\t// \t\t// });\n\n\t// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n\t// \t\t\tconsole.log(result);\n\t// \t\t});\n\n\t// \t\tawait timeout(timeout);\n\t// \t\t//this.props.ble.stopScan();\n\n\t// \t\tconsole.log(\"stopped scan!\");\n\t// \t}\n\t// }\n\n\t\t// const checkEnabled = () => {\n\n\t// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\n\t// }\n\n\t// const timeout = (s) => {\n\t// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t// }\n\n\n\n\t\t\t// if (!isPlatform('cordova')) {\n\t\t// \tconsole.log(\"platform not cordova, BLE will not work!\");\n\t\t// \t//set cordova variable\n\t\t// \treturn;\n\t\t// }\n\n\n"]},"metadata":{},"sourceType":"module"}