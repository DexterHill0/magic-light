{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/BluetoothDeviceItem.tsx\";\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\nimport React from 'react';\nimport { IonIcon, IonSpinner, IonItem, IonAvatar, IonLabel } from '@ionic/react';\nimport { bluetoothOutline, checkmarkOutline, closeOutline } from 'ionicons/icons';\nimport './BluetoothDeviceItem.css';\n\n// const BluetoothDeviceItem = (Props) => {\n// \tconst [connectingState, setConnectingState] = useState(Props.state());\n// \tuseEffect(() => {\n// \t\tstateChangeCallback();\n// \t}, [connectingState]);\n// \tconst ref = React.useRef(null)\n// \tconst { onClick } = Props;\n// \tconst stateChangeCallback = () => {\n// \t\tconst elementIndex = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children).findIndex(function (data) { return data.id === Props.mac })\n// \t\tconst connectingIcon = document.getElementsByClassName(\"connecting-icons\")[elementIndex];\n// \t\tconst spinnerIcon = document.getElementsByClassName(\"connecting-spinner\")[elementIndex][\"style\"];\n// \t\tswitch (connectingState) {\n// \t\t\tcase 'not_connected':\n// \t\t\t\tconnectingIcon[\"style\"][\"color\"] = \"var(--ion-color-danger)\";\n// \t\t\t\tconnectingIcon[\"icon\"] = closeOutline;\n// \t\t\t\tbreak;\n// \t\t\tcase 'connecting':\n// \t\t\t\tspinnerIcon.opacity = 1;\n// \t\t\t\tconnectingIcon[\"style\"][\"opacity\"] = 0;\n// \t\t\t\tbreak;\n// \t\t\tcase 'connected':\n// \t\t\t\tspinnerIcon.opactiy = 0;\n// \t\t\t\tconnectingIcon[\"style\"][\"opacity\"] = 1;\n// \t\t\t\tconnectingIcon[\"style\"][\"color\"] = \"var(--ion-color-success)\";\n// \t\t\t\tconnectingIcon[\"icon\"] = checkmarkOutline;\n// \t\t}\n// \t}\n// \tconst rerender = () => {\n// \t\tsetConnectingState(Props.state());\n// \t}\n// \tconst wait = async () => {\n// \t\tonClick(Props.mac);\n// \t\trerender();\n// \t}\n// \treturn (\n// \t\t<IonItem lines=\"none\" class=\"item-container\" id={Props.mac} onClick={wait} ref={ref} {...rerender}>\n// \t\t\t<IonAvatar slot=\"start\" class=\"bluetooth-icon-container\">\n// \t\t\t\t<IonIcon icon={bluetoothOutline} class=\"bluetooth-icon\"></IonIcon>\n// \t\t\t</IonAvatar>\n// \t\t\t<IonAvatar slot=\"end\" class=\"connecting-icons-container\">\n// \t\t\t\t<IonIcon icon={closeOutline} class=\"connecting-icons\"></IonIcon>\n// \t\t\t\t<IonSpinner name=\"dots\" class=\"connecting-spinner\"></IonSpinner>\n// \t\t\t</IonAvatar>\n// \t\t\t<IonLabel>\n// \t\t\t\t<div className=\"device-name\">{Props.name}</div>\n// \t\t\t\t<div className=\"device-mac\">{Props.mac}</div>\n// \t\t\t</IonLabel>\n// \t\t</IonItem>\n// \t);\n// }\nclass BluetoothDeviceItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.icon = void 0;\n\n    this.updateIcons = () => {\n      const elementIndex = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children).findIndex(data => {\n        return data.id === this.props.mac;\n      });\n      const connectingIcon = document.getElementsByClassName(\"connecting-icons\")[elementIndex];\n      const spinnerIcon = document.getElementsByClassName(\"connecting-spinner\")[elementIndex][\"style\"];\n\n      switch (this.props.state()) {\n        case 'not_connected':\n          spinnerIcon.opactiy = 0; //connectingIcon[\"style\"][\"color\"] = \"var(--ion-color-danger)\";\n          //connectingIcon[\"icon\"] = closeOutline;\n\n          this.icon = closeOutline;\n          break;\n\n        case 'connecting':\n          spinnerIcon.opacity = 1; //connectingIcon[\"style\"][\"opacity\"] = 0;\n\n          break;\n\n        case 'connected':\n          spinnerIcon.opactiy = 0;\n          this.icon = checkmarkOutline; //connectingIcon[\"style\"][\"opacity\"] = 1;\n          //connectingIcon[\"style\"][\"color\"] = \"var(--ion-color-success)\";\n          //connectingIcon[\"icon\"] = checkmarkOutline;\n\n          break;\n      }\n    };\n\n    this.rerender = () => {\n      this.updateIcons();\n    };\n\n    this.wait = async () => {\n      this.props.onClick(this.props.mac);\n      this.rerender();\n    };\n\n    this.icon = closeOutline;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(IonItem, {\n      lines: \"none\",\n      class: \"item-container\",\n      id: this.props.mac,\n      onClick: this.wait,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(IonAvatar, {\n      slot: \"start\",\n      class: \"bluetooth-icon-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(IonIcon, {\n      icon: bluetoothOutline,\n      class: \"bluetooth-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(IonAvatar, {\n      slot: \"end\",\n      class: \"connecting-icons-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(IonIcon, {\n      icon: this.icon,\n      class: \"connecting-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(IonSpinner, {\n      name: \"dots\",\n      class: \"connecting-spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(IonLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"device-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 6\n      }\n    }, this.props.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"device-mac\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 6\n      }\n    }, this.props.mac)));\n  }\n\n}\n\nexport default BluetoothDeviceItem; //For those who can't view the video, basically, there is a list of 5 (fake) bluetooth devices. Each one has an indicator icon on the right side to show its state of connectivity. When it's not connected, the icon is a red cross. I click on the first device in the list and the icon turns into a dots spinner. I proceed to click on the next device down (second). The icon also changes to a spinner. The problem is the first device's icon does not reset back to the red cross like it should. The correct operation is demonstrated in the codesandbox.","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/BluetoothDeviceItem.tsx"],"names":["React","IonIcon","IonSpinner","IonItem","IonAvatar","IonLabel","bluetoothOutline","checkmarkOutline","closeOutline","BluetoothDeviceItem","Component","constructor","props","icon","updateIcons","elementIndex","Array","prototype","slice","call","document","getElementsByClassName","children","findIndex","data","id","mac","connectingIcon","spinnerIcon","state","opactiy","opacity","rerender","wait","onClick","render","name"],"mappings":";AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,OAA9B,EAAuCC,SAAvC,EAAkDC,QAAlD,QAAiE,cAAjE;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,YAA7C,QAAqF,gBAArF;AAEA,OAAO,2BAAP;;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMC,mBAAN,SAAkCT,KAAK,CAACU,SAAxC,CAA6D;AAG5DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AADkB,SAFnBC,IAEmB;;AAAA,SAMXC,WANW,GAMG,MAAM;AAC3B,YAAMC,YAAY,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,QAAQ,CAACC,sBAAT,CAAgC,aAAhC,EAA+C,CAA/C,EAAkDC,QAA7E,EAAuFC,SAAvF,CAAkGC,IAAD,IAAU;AAAC,eAAOA,IAAI,CAACC,EAAL,KAAY,KAAKb,KAAL,CAAWc,GAA9B;AAAkC,OAA9I,CAArB;AAEA,YAAMC,cAAc,GAAGP,QAAQ,CAACC,sBAAT,CAAgC,kBAAhC,EAAoDN,YAApD,CAAvB;AACA,YAAMa,WAAW,GAAGR,QAAQ,CAACC,sBAAT,CAAgC,oBAAhC,EAAsDN,YAAtD,EAAoE,OAApE,CAApB;;AAEA,cAAQ,KAAKH,KAAL,CAAWiB,KAAX,EAAR;AACC,aAAK,eAAL;AACCD,UAAAA,WAAW,CAACE,OAAZ,GAAsB,CAAtB,CADD,CAEC;AACA;;AACA,eAAKjB,IAAL,GAAYL,YAAZ;AACA;;AACD,aAAK,YAAL;AACCoB,UAAAA,WAAW,CAACG,OAAZ,GAAsB,CAAtB,CADD,CAEC;;AACA;;AACD,aAAK,WAAL;AACCH,UAAAA,WAAW,CAACE,OAAZ,GAAsB,CAAtB;AACA,eAAKjB,IAAL,GAAYN,gBAAZ,CAFD,CAGC;AACA;AACA;;AACA;AAjBF;AAmBA,KA/BkB;;AAAA,SAiCZyB,QAjCY,GAiCD,MAAM;AACvB,WAAKlB,WAAL;AACA,KAnCkB;;AAAA,SAqCXmB,IArCW,GAqCJ,YAAY;AAC1B,WAAKrB,KAAL,CAAWsB,OAAX,CAAmB,KAAKtB,KAAL,CAAWc,GAA9B;AACA,WAAKM,QAAL;AACA,KAxCkB;;AAGlB,SAAKnB,IAAL,GAAYL,YAAZ;AACA;;AAsCD2B,EAAAA,MAAM,GAAG;AACR,wBACC,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAC,gBAA5B;AAA6C,MAAA,EAAE,EAAE,KAAKvB,KAAL,CAAWc,GAA5D;AAAiE,MAAA,OAAO,EAAE,KAAKO,IAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,OAAhB;AAAwB,MAAA,KAAK,EAAC,0BAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE3B,gBAAf;AAAiC,MAAA,KAAK,EAAC,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD,eAIC,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,KAAhB;AAAsB,MAAA,KAAK,EAAC,4BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE,KAAKO,IAApB;AAA0B,MAAA,KAAK,EAAC,kBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAEC,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,MAAjB;AAAwB,MAAA,KAAK,EAAC,oBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CAJD,eAQC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKD,KAAL,CAAWwB,IAAzC,CADD,eAEC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,KAAKxB,KAAL,CAAWc,GAAxC,CAFD,CARD,CADD;AAeA;;AA7D2D;;AAgE7D,eAAejB,mBAAf,C,CAEA","sourcesContent":["\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n\nimport React from 'react';\nimport { IonIcon, IonSpinner, IonItem, IonAvatar, IonLabel} from '@ionic/react';\nimport { bluetoothOutline, checkmarkOutline, closeOutline, syncOutline, close } from 'ionicons/icons';\n\nimport './BluetoothDeviceItem.css';\n\n\ninterface Props {\n\tname: string;\n\tmac: string;\n\tstate: () => string;\n\tonClick: (id) => void;\n}\n\n// const BluetoothDeviceItem = (Props) => {\n// \tconst [connectingState, setConnectingState] = useState(Props.state());\n// \tuseEffect(() => {\n// \t\tstateChangeCallback();\n// \t}, [connectingState]);\n\n// \tconst ref = React.useRef(null)\n// \tconst { onClick } = Props;\n\n// \tconst stateChangeCallback = () => {\n// \t\tconst elementIndex = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children).findIndex(function (data) { return data.id === Props.mac })\n// \t\tconst connectingIcon = document.getElementsByClassName(\"connecting-icons\")[elementIndex];\n// \t\tconst spinnerIcon = document.getElementsByClassName(\"connecting-spinner\")[elementIndex][\"style\"];\n\n// \t\tswitch (connectingState) {\n// \t\t\tcase 'not_connected':\n// \t\t\t\tconnectingIcon[\"style\"][\"color\"] = \"var(--ion-color-danger)\";\n// \t\t\t\tconnectingIcon[\"icon\"] = closeOutline;\n// \t\t\t\tbreak;\n// \t\t\tcase 'connecting':\n// \t\t\t\tspinnerIcon.opacity = 1;\n// \t\t\t\tconnectingIcon[\"style\"][\"opacity\"] = 0;\n// \t\t\t\tbreak;\n// \t\t\tcase 'connected':\n// \t\t\t\tspinnerIcon.opactiy = 0;\n// \t\t\t\tconnectingIcon[\"style\"][\"opacity\"] = 1;\n// \t\t\t\tconnectingIcon[\"style\"][\"color\"] = \"var(--ion-color-success)\";\n// \t\t\t\tconnectingIcon[\"icon\"] = checkmarkOutline;\n// \t\t}\n// \t}\n\n// \tconst rerender = () => {\n// \t\tsetConnectingState(Props.state());\n// \t}\n\n// \tconst wait = async () => {\n// \t\tonClick(Props.mac);\n// \t\trerender();\n\n// \t}\n\n// \treturn (\n// \t\t<IonItem lines=\"none\" class=\"item-container\" id={Props.mac} onClick={wait} ref={ref} {...rerender}>\n// \t\t\t<IonAvatar slot=\"start\" class=\"bluetooth-icon-container\">\n// \t\t\t\t<IonIcon icon={bluetoothOutline} class=\"bluetooth-icon\"></IonIcon>\n// \t\t\t</IonAvatar>\n// \t\t\t<IonAvatar slot=\"end\" class=\"connecting-icons-container\">\n// \t\t\t\t<IonIcon icon={closeOutline} class=\"connecting-icons\"></IonIcon>\n// \t\t\t\t<IonSpinner name=\"dots\" class=\"connecting-spinner\"></IonSpinner>\n// \t\t\t</IonAvatar>\n// \t\t\t<IonLabel>\n// \t\t\t\t<div className=\"device-name\">{Props.name}</div>\n// \t\t\t\t<div className=\"device-mac\">{Props.mac}</div>\n// \t\t\t</IonLabel>\n// \t\t</IonItem>\n// \t);\n// }\n\n\nclass BluetoothDeviceItem extends React.Component<Props, {}> {\n\ticon: string;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.icon = closeOutline;\n\t}\n\n\tprivate updateIcons = () => {\n\t\tconst elementIndex = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children).findIndex((data) => {return data.id === this.props.mac});\n\n\t\tconst connectingIcon = document.getElementsByClassName(\"connecting-icons\")[elementIndex];\n\t\tconst spinnerIcon = document.getElementsByClassName(\"connecting-spinner\")[elementIndex][\"style\"];\n\n\t\tswitch (this.props.state()) {\n\t\t\tcase 'not_connected':\n\t\t\t\tspinnerIcon.opactiy = 0;\n\t\t\t\t//connectingIcon[\"style\"][\"color\"] = \"var(--ion-color-danger)\";\n\t\t\t\t//connectingIcon[\"icon\"] = closeOutline;\n\t\t\t\tthis.icon = closeOutline;\n\t\t\t\tbreak;\n\t\t\tcase 'connecting':\n\t\t\t\tspinnerIcon.opacity = 1;\n\t\t\t\t//connectingIcon[\"style\"][\"opacity\"] = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'connected':\n\t\t\t\tspinnerIcon.opactiy = 0;\n\t\t\t\tthis.icon = checkmarkOutline;\n\t\t\t\t//connectingIcon[\"style\"][\"opacity\"] = 1;\n\t\t\t\t//connectingIcon[\"style\"][\"color\"] = \"var(--ion-color-success)\";\n\t\t\t\t//connectingIcon[\"icon\"] = checkmarkOutline;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic rerender = () => {\n\t\tthis.updateIcons();\n\t}\n\n\tprivate wait = async () => {\n\t\tthis.props.onClick(this.props.mac);\n\t\tthis.rerender();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<IonItem lines=\"none\" class=\"item-container\" id={this.props.mac} onClick={this.wait} >\n\t\t\t\t<IonAvatar slot=\"start\" class=\"bluetooth-icon-container\">\n\t\t\t\t\t<IonIcon icon={bluetoothOutline} class=\"bluetooth-icon\"></IonIcon>\n\t\t\t\t</IonAvatar>\n\t\t\t\t<IonAvatar slot=\"end\" class=\"connecting-icons-container\">\n\t\t\t\t\t<IonIcon icon={this.icon} class=\"connecting-icons\"></IonIcon>\n\t\t\t\t\t<IonSpinner name=\"dots\" class=\"connecting-spinner\"></IonSpinner>\n\t\t\t\t</IonAvatar>\n\t\t\t\t<IonLabel>\n\t\t\t\t\t<div className=\"device-name\">{this.props.name}</div>\n\t\t\t\t\t<div className=\"device-mac\">{this.props.mac}</div>\n\t\t\t\t</IonLabel>\n\t\t\t</IonItem>\n\t\t);\n\t}\n}\n\nexport default BluetoothDeviceItem;\n\n//For those who can't view the video, basically, there is a list of 5 (fake) bluetooth devices. Each one has an indicator icon on the right side to show its state of connectivity. When it's not connected, the icon is a red cross. I click on the first device in the list and the icon turns into a dots spinner. I proceed to click on the next device down (second). The icon also changes to a spinner. The problem is the first device's icon does not reset back to the red cross like it should. The correct operation is demonstrated in the codesandbox.\n"]},"metadata":{},"sourceType":"module"}