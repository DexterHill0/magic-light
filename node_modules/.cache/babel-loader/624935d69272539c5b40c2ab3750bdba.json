{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\nimport React, { createRef } from 'react';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n  let states = {};\n  const deviceItems = [];\n  const deviceRefs = [];\n\n  const bluetoothInitialize = () => {\n    for (let i = 0; i < 5; i++) {\n      let a = {\n        name: \"test_\" + i,\n        mac: i.toString(),\n        connected: false\n      };\n      createDeviceItem(a);\n    }\n  };\n\n  const connect = id => {\n    console.log(deviceRefs[0].current.value);\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n        updateDeviceItemState(item.props.mac, 'not_connected');\n      }\n\n      if (id === item.props.mac) {\n        updateDeviceItemState(item.props.mac, 'connecting');\n      }\n\n      console.log(item.props);\n    });\n  };\n\n  const createDeviceItem = data => {\n    states = { ...states,\n      [data.mac]: data.connected ? 'connected' : 'not_connected'\n    };\n    let ref = createRef();\n    deviceItems.push( /*#__PURE__*/React.createElement(Item, Object.assign({\n      ref: ref\n    }, data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }\n    }))); //<BluetoothDeviceItem ref={ref} key={data.mac} mac={data.mac} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.mac]}} elRef={ref}></BluetoothDeviceItem>);\n\n    deviceRefs.push(ref);\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState;\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize\n  };\n};\n\nexport default _Bluetooth;\nconst Item = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n  ref: ref,\n  key: props.mac,\n  mac: props.mac,\n  name: props.name,\n  elRef: ref,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 2\n  }\n}));\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n} //this.checkEnabled();\n// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n//   if(result.status === \"disabled\") {\n//     this.checkEnabled();\n//   }\n// });\n// const scan = async (timeout) => {\n// \tif (!isCordova) {\n// \t\t//this.props.ble.stopScan(); //stop any current scans\n// \t\tconsole.log(\"scanning!\");\n// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n// \t\t//   if(result.status === \"scanResult\") {\n// \t\t//     this.devices.push(result);\n// \t\t//   }\n// \t\t//   else if(result.status !== \"scanStarted\") {\n// \t\t//     this.checkEnabled();\n// \t\t//   }\n// \t\t// });\n// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n// \t\t\tconsole.log(result);\n// \t\t});\n// \t\tawait timeout(timeout);\n// \t\t//this.props.ble.stopScan();\n// \t\tconsole.log(\"stopped scan!\");\n// \t}\n// }\n// const checkEnabled = () => {\n// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n// }\n// const timeout = (s) => {\n// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n// }\n// if (!isPlatform('cordova')) {\n// \tconsole.log(\"platform not cordova, BLE will not work!\");\n// \t//set cordova variable\n// \treturn;\n// }","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","createRef","BluetoothDeviceItem","_Bluetooth","states","deviceItems","deviceRefs","bluetoothInitialize","i","a","name","mac","toString","connected","createDeviceItem","connect","id","console","log","current","value","forEach","item","props","state","updateDeviceItemState","data","ref","push","connectingState","Item","forwardRef"],"mappings":"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","sourcesContent":["import React, { createRef, useRef } from 'react';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n\n\tlet states: {} = {}\n\tconst deviceItems: any[] = [];\n\tconst deviceRefs: any[] = [];\n\n\tconst bluetoothInitialize = () => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tlet a = {name: \"test_\"+i, mac: i.toString(), connected: false}\n\t\t\tcreateDeviceItem(a);\n\t\t}\n\t}\n\n\tconst connect = (id) => {\n\n\t\tconsole.log(deviceRefs[0].current.value);\n\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t}\n\n\t\t\tif(id === item.props.mac) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'connecting');\n\t\t\t}\n\n\t\t\tconsole.log(item.props);\n\n\t\t});\n\t}\n\n\tconst createDeviceItem = (data) => {\n\t\tstates = {...states, [data.mac]: data.connected ? 'connected' : 'not_connected'}\n\t\tlet ref = createRef();\n\t\tdeviceItems.push(<Item ref={ref} {...data}></Item>);//<BluetoothDeviceItem ref={ref} key={data.mac} mac={data.mac} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.mac]}} elRef={ref}></BluetoothDeviceItem>);\n\t\tdeviceRefs.push(ref);\n\t}\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize}\n\t);\n}\nexport default _Bluetooth;\n\nconst Item = React.forwardRef((props, ref) => \n\t<BluetoothDeviceItem ref={ref} key={props.mac} mac={props.mac} name={props.name} elRef={ref}/>\n);\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n //this.checkEnabled();\n\n\t\t// await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t\t//   if(result.status === \"disabled\") {\n\t\t//     this.checkEnabled();\n\t\t//   }\n\t\t// });\n\n\t\t// const scan = async (timeout) => {\n\t// \tif (!isCordova) {\n\t// \t\t//this.props.ble.stopScan(); //stop any current scans\n\n\t// \t\tconsole.log(\"scanning!\");\n\n\t// \t\t// this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t// \t\t//   if(result.status === \"scanResult\") {\n\t// \t\t//     this.devices.push(result);\n\t// \t\t//   }\n\t// \t\t//   else if(result.status !== \"scanStarted\") {\n\t// \t\t//     this.checkEnabled();\n\t// \t\t//   }\n\t// \t\t// });\n\n\t// \t\tBluetoothProps.bls.discoverUnpaired().then(function (result) {\n\t// \t\t\tconsole.log(result);\n\t// \t\t});\n\n\t// \t\tawait timeout(timeout);\n\t// \t\t//this.props.ble.stopScan();\n\n\t// \t\tconsole.log(\"stopped scan!\");\n\t// \t}\n\t// }\n\n\t\t// const checkEnabled = () => {\n\n\t// \t//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t// \t//this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\n\t// }\n\n\t// const timeout = (s) => {\n\t// \treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t// }\n\n\n\n\t\t\t// if (!isPlatform('cordova')) {\n\t\t// \tconsole.log(\"platform not cordova, BLE will not work!\");\n\t\t// \t//set cordova variable\n\t\t// \treturn;\n\t\t// }\n\n\n"]},"metadata":{},"sourceType":"module"}