{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\nimport React, { createRef } from 'react';\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n  let states = {};\n  let deviceRefs = {};\n  const deviceItems = [];\n\n  const bluetoothInitialize = async () => {\n    await ble.initialize({\n      \"request\": true,\n      \"statusReceiver\": false,\n      \"restoreKey\": \"magic-light-ble\"\n    }).subscribe(result => {\n      if (result.status === \"disabled\") {\n        checkEnabled();\n      }\n    });\n  };\n\n  const checkEnabled = () => {//ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n    //ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n  };\n\n  const scan = async t => {\n    ble.stopScan(); //stop any current scans\n\n    console.log(\"scanning!\");\n    ble.startScan({\n      \"allowDuplicates\": false,\n      \"isConnectable\": true\n    }).subscribe(result => {\n      if (result.status === \"scanResult\") {\n        createDeviceItem(result);\n      } else if (result.status !== \"scanStarted\") {\n        checkEnabled();\n      }\n    }); // bls.discoverUnpaired().then(function (result) {\n    // \tconsole.log(result);\n    // });\n\n    await timeout(t);\n    ble.stopScan();\n    console.log(\"stopped scan!\");\n  };\n\n  const connect = id => {\n    updateDeviceItemState(id, 'connecting');\n    checkAlreadyConnecting(id);\n  };\n\n  const checkAlreadyConnecting = id => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n        updateDeviceItemState(item.props.mac, 'not_connected');\n        deviceRefs[item.props.mac].current.rerender();\n        ble.disconnect({\n          address: id\n        }).then(result => {\n          console.log(\"disconnected \" + id);\n        });\n        ble.close({\n          address: id\n        }).then(result => {\n          console.log(\"closed \" + id);\n        });\n      }\n    });\n  };\n\n  const createDeviceItem = data => {\n    states = { ...states,\n      [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'\n    };\n    deviceRefs = { ...deviceRefs,\n      [data.address]: createRef()\n    };\n    deviceItems.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      ref: deviceRefs[data.address],\n      key: data.adress,\n      mac: data.address,\n      name: data.name,\n      onClick: id => connect(id),\n      state: () => {\n        return states[data.address];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 20\n      }\n    }));\n\n    if (data.advertisement.isConnectable === 0) {\n      checkAlreadyConnecting(data.address);\n    }\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState;\n  };\n\n  const timeout = s => {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize,\n    scan\n  };\n};\n\nexport default _Bluetooth;\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n}","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","createRef","BluetoothLE","ble","BluetoothDeviceItem","_Bluetooth","states","deviceRefs","deviceItems","bluetoothInitialize","initialize","subscribe","result","status","checkEnabled","scan","t","stopScan","console","log","startScan","createDeviceItem","timeout","connect","id","updateDeviceItemState","checkAlreadyConnecting","forEach","item","props","state","mac","current","rerender","disconnect","address","then","close","data","advertisement","isConnectable","push","adress","name","connectingState","s","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n\n\nimport React, { createRef, useRef } from 'react';\n\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le';\nimport { BluetoothSerial as bls } from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n\n\tlet states: {} = {};\n\tlet deviceRefs: {} = {};\n\tconst deviceItems: any[] = [];\n\n\tconst bluetoothInitialize = async () => {\n\t\tawait ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t\t\tif(result.status === \"disabled\") {\n\t\t\t\tcheckEnabled();\n\t\t\t}\n\t\t});\n\t}\n\n\tconst checkEnabled = () => {\n\t\t//ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t\t//ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\t}\n\n\n\tconst scan = async (t) => {\n\t\tble.stopScan(); //stop any current scans\n\n\t\tconsole.log(\"scanning!\");\n\n\t\tble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t\t\tif(result.status === \"scanResult\") {\n\t\t\t\tcreateDeviceItem(result);\n\t\t\t}\n\t\t\telse if(result.status !== \"scanStarted\") {\n\t\t\t\tcheckEnabled();\n\t\t\t}\n\t\t});\n\n\t\t// bls.discoverUnpaired().then(function (result) {\n\t\t// \tconsole.log(result);\n\t\t// });\n\n\t\tawait timeout(t);\n\t\tble.stopScan();\n\n\t\tconsole.log(\"stopped scan!\");\n\t}\n\n\tconst connect = (id) => {\n\t\tupdateDeviceItemState(id, 'connecting');\n\t\tcheckAlreadyConnecting(id);\n\n\n\t}\n\n\tconst checkAlreadyConnecting = (id) => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t\tdeviceRefs[item.props.mac].current.rerender();\n\n\t\t\t\tble.disconnect({address: id}).then((result) => {\n\t\t\t\t\tconsole.log(\"disconnected \"+id);\n\t\t\t\t});\n\t\t\t\tble.close({address: id}).then((result) => {\n\t\t\t\t\t\tconsole.log(\"closed \"+id);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tconst createDeviceItem = (data) => {\n\t\tstates = {...states, [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'}\n\t\tdeviceRefs = {...deviceRefs, [data.address]: createRef<BluetoothDeviceItem>()};\n\t\tdeviceItems.push(<BluetoothDeviceItem ref={deviceRefs[data.address]} key={data.adress} mac={data.address} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.address]}}></BluetoothDeviceItem>);\n\t\t\n\t\tif(data.advertisement.isConnectable === 0){\n\t\t\tcheckAlreadyConnecting(data.address);\n\t\t}\n\t}\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;\n\t}\n\tconst timeout = (s) => {\n\t\treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize, scan}\n\t);\n}\nexport default _Bluetooth;\n\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}