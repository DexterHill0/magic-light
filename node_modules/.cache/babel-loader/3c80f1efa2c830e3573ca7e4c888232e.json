{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\nimport React, { createRef } from 'react';\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le/';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\nimport { isPlatform } from '@ionic/react';\n\nconst _Bluetooth = () => {\n  let states = {};\n  let deviceRefs = {};\n  let deviceItems = [];\n  const serviceUuids = [];\n  const ble = new Bluetooth();\n\n  const bluetoothInitialize = async () => {\n    console.log(\"1\");\n    ble.initialize();\n    console.log(\"2\");\n  };\n\n  const scan = async t => {\n    console.log(\"fdfd\");\n    let d = await ble.scan(t); //console.log(d.length);\n    //console.log(d[0]);\n    //console.log(d[1]);\n    // d.forEach(el => {\n    // \tconsole.log(el)\n    // \tcreateDeviceItem(el, true);\n    // });\n    // console.log(d)\n    // for(let el in d){\n    // \tconsole.log(d[el]);\n    // }\n  };\n\n  const connect = id => {\n    updateDeviceItemState(id, 'connecting');\n    checkAlreadyConnecting(id);\n  };\n\n  const checkAlreadyConnecting = id => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n        updateDeviceItemState(item.props.mac, 'not_connected');\n        deviceRefs[item.props.mac].current.rerender();\n      }\n    });\n  };\n\n  const createDeviceItem = (data, isFromUnpaired) => {\n    if (states[data.address] === \"\") {\n      return; //device already added to list\n    }\n\n    if (isPlatform(\"ios\") && isFromUnpaired) {\n      serviceUuids.push(...data.advertisement.serviceUuids);\n      states = { ...states,\n        [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'\n      };\n    } else {\n      states = { ...states,\n        [data.address]: 'not_connected'\n      };\n    }\n\n    deviceRefs = { ...deviceRefs,\n      [data.address]: createRef()\n    };\n    deviceItems.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      ref: deviceRefs[data.address],\n      mac: data.address,\n      name: data.name,\n      onClick: id => connect(id),\n      state: () => {\n        return states[data.address];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 20\n      }\n    }));\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState;\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize,\n    scan\n  };\n};\n\nexport default _Bluetooth;\n\nclass Bluetooth {\n  constructor() {\n    this.isEnabled = void 0;\n    this.hasScanBeenRequested = void 0;\n    this.isEnabled = false;\n    this.hasScanBeenRequested = false;\n  }\n\n  async initialize() {\n    await ble.initialize({\n      \"request\": true,\n      \"statusReceiver\": true,\n      \"restoreKey\": \"magic-light-ble\"\n    }).toPromise().then(result => {\n      if (result.status == \"disabled\") {\n        //notifcation\n        this.isEnabled = false;\n        document.addEventListener(\"resume\", this.onResume);\n      } else {\n        this.isEnabled = true;\n      }\n    });\n    console.log(\"3\");\n    await ble.stopScan();\n  }\n\n  async scan(scantime) {\n    let devices = [];\n    this.hasScanBeenRequested = true;\n    console.log(\"dfff\");\n\n    if (this.isEnabled) {\n      console.log(\"bhidfsdfzdfiz\");\n      ble.startScan({\n        \"allowDuplicates\": false\n      }).subscribe(result => {\n        devices.push(result);\n      });\n      await this.timeout(scantime);\n      ble.stopScan().then(result => {\n        if (result.status !== \"scanStopped\") {//warn user?\n        }\n      });\n    }\n\n    return devices;\n  }\n\n  timeout(s) {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  }\n\n  onResume() {\n    ble.isEnabled().then(result => {\n      if (result.isEnabled) {\n        this.isEnabled = true;\n        document.removeEventListener(\"resume\", this.onResume);\n      }\n\n      if (this.hasScanBeenRequested) {\n        this.scan(5);\n      }\n    });\n  }\n\n} //\n\n\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n}","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","createRef","BluetoothLE","ble","BluetoothDeviceItem","isPlatform","_Bluetooth","states","deviceRefs","deviceItems","serviceUuids","Bluetooth","bluetoothInitialize","console","log","initialize","scan","t","d","connect","id","updateDeviceItemState","checkAlreadyConnecting","forEach","item","props","state","mac","current","rerender","createDeviceItem","data","isFromUnpaired","address","push","advertisement","isConnectable","name","connectingState","constructor","isEnabled","hasScanBeenRequested","toPromise","then","result","status","document","addEventListener","onResume","stopScan","scantime","devices","startScan","subscribe","timeout","s","Promise","resolve","setTimeout","removeEventListener"],"mappings":"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","sourcesContent":["//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n\n\nimport React, { createRef } from 'react';\n\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le/';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\nimport { isPlatform } from '@ionic/react';\n\nconst _Bluetooth = () => {\n\n\tlet states: {} = {};\n\tlet deviceRefs: {} = {};\n\tlet deviceItems: any[] = [];\n\n\tconst serviceUuids: string[] = [];\n\n\tconst ble = new Bluetooth();\n\n\tconst bluetoothInitialize = async () => {\n\t\tconsole.log(\"1\")\n\t\tble.initialize();\n\t\tconsole.log(\"2\")\n\t}\n\n\tconst scan = async (t) => {\n\t\tconsole.log(\"fdfd\")\n\t\tlet d = await ble.scan(t);\n\t\t//console.log(d.length);\n\t\t//console.log(d[0]);\n\t\t//console.log(d[1]);\n\t\t// d.forEach(el => {\n\t\t// \tconsole.log(el)\n\t\t// \tcreateDeviceItem(el, true);\n\t\t// });\n\t\t// console.log(d)\n\t\t// for(let el in d){\n\t\t// \tconsole.log(d[el]);\n\t\t// }\n\t}\n\n\tconst connect = (id) => {\n\t\tupdateDeviceItemState(id, 'connecting');\n\t\tcheckAlreadyConnecting(id);\n\t}\n\n\tconst checkAlreadyConnecting = (id) => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t\tdeviceRefs[item.props.mac].current.rerender();\n\t\t\t}\n\t\t});\n\t}\n\n\tconst createDeviceItem = (data, isFromUnpaired) => {\n\t\tif(states[data.address] === \"\"){\n\t\t\treturn; //device already added to list\n\t\t}\n\t\tif(isPlatform(\"ios\") && isFromUnpaired) {\n\t\t\tserviceUuids.push(...data.advertisement.serviceUuids);\n\t\t\tstates = {...states, [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'};\n\t\t}\n\t\telse {\n\t\t\tstates = {...states, [data.address]: 'not_connected'};\n\t\t}\n\n\t\tdeviceRefs = {...deviceRefs, [data.address]: createRef<BluetoothDeviceItem>()};\n\t\tdeviceItems.push(<BluetoothDeviceItem ref={deviceRefs[data.address]} mac={data.address} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.address]}}></BluetoothDeviceItem>);\n\t}\n\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize, scan}\n\t);\n}\nexport default _Bluetooth; \n\n\nclass Bluetooth {\n\tisEnabled: boolean;\n\thasScanBeenRequested: boolean;\n\n\tconstructor() {\n\t\tthis.isEnabled = false;\n\t\tthis.hasScanBeenRequested = false;\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tawait ble.initialize({\n\t\t\t\"request\": true,\n\t\t\t\"statusReceiver\": true,\n\t\t\t\"restoreKey\": \"magic-light-ble\"\n\t\t}).toPromise().then((result) => {\n\t\t\tif (result.status == \"disabled\") {\n\t\t\t\t//notifcation\n\t\t\t\tthis.isEnabled = false;\n\t\t\t\tdocument.addEventListener(\"resume\", this.onResume);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.isEnabled = true;\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(\"3\")\n\t\t\n\t\tawait ble.stopScan();\n\t}\n\n\tasync scan(scantime): Promise<any[]> {\n\t\tlet devices: any[] = [];\n\n\t\tthis.hasScanBeenRequested = true;\n\n\t\tconsole.log(\"dfff\")\n\n\t\tif(this.isEnabled) {\n\t\t\tconsole.log(\"bhidfsdfzdfiz\")\n\t\t\tble.startScan({\n\t\t\t\t\"allowDuplicates\": false,\n\t\t\t}).subscribe((result) => {\n\t\t\t\tdevices.push(result);\n\t\t\t})\n\n\t\t\tawait this.timeout(scantime);\n\n\t\t\tble.stopScan().then((result) => {\n\t\t\t\tif(result.status !== \"scanStopped\") {\n\t\t\t\t\t//warn user?\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn devices;\n\t}\n\n\ttimeout(s): Promise<object> {\n\t\treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t}\n \n\tonResume(): void {\n\t\tble.isEnabled().then((result) => {\n\t\t\tif(result.isEnabled){\n\t\t\t\tthis.isEnabled = true;\n\t\t\t\tdocument.removeEventListener(\"resume\", this.onResume)\n\t\t\t}\n\n\t\t\tif(this.hasScanBeenRequested) {\n\t\t\t\tthis.scan(5);\n\t\t\t}\n\t\t});\n\t}\n}\n\n//\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}