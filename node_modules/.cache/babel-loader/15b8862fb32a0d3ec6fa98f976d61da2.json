{"ast":null,"code":"export var bluetoothDevices = [];\nimport { createStore } from 'react-redux';\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\n\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n} // Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\n\n\nexport var store = createStore(counter).subscribe(() => console.log(store.getState())); // 1","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/globals/globals.tsx"],"names":["bluetoothDevices","createStore","counter","state","action","type","store","subscribe","console","log","getState"],"mappings":"AAAA,OAAO,IAAIA,gBAAuB,GAAG,EAA9B;AAEP,SAASC,WAAT,QAA4B,aAA5B;AAEA;;;;;;;;;;;;;AAYA,SAASC,OAAT,CAAiBC,KAAK,GAAG,CAAzB,EAA4BC,MAA5B,EAAoC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,WAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD,C,CAED;AACA;;;AACA,OAAO,IAAIG,KAAK,GAAGL,WAAW,CAACC,OAAD,CAAX,CAAqBK,SAArB,CAA+B,MAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAArC,CAAZ,C,CAEP","sourcesContent":["export var bluetoothDevices: any[] = [];\n\nimport { createStore } from 'react-redux'\n\n/**\n * This is a reducer, a pure function with (state, action) => state signature.\n * It describes how an action transforms the state into the next state.\n *\n * The shape of the state is up to you: it can be a primitive, an array, an object,\n * or even an Immutable.js data structure. The only important part is that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * In this example, we use a `switch` statement and strings, but you can use a helper that\n * follows a different convention (such as function maps) if it makes sense for your\n * project.\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nexport var store = createStore(counter).subscribe(() => console.log(store.getState()));\n\n// 1"]},"metadata":{},"sourceType":"module"}