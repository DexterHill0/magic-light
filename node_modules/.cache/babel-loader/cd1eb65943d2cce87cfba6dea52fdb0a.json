{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\nimport React, { useState } from 'react';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\nexport const _Bluetooth = () => {\n  const [state, setState] = useState({\n    found: []\n  });\n  const devices = [];\n\n  const bluetoothInitialize = () => {\n    for (let i = 0; i < 5; i++) {\n      let a = {\n        name: \"test\",\n        mac: i.toString(),\n        connected: false\n      };\n      devices.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n        key: a.mac,\n        mac: a.mac,\n        name: a.name,\n        onClick: id => connect(id),\n        connectingState: a.connected ? 'connected' : 'not_connected',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }));\n    }\n  };\n\n  const connect = id => {\n    console.log(\"hi\"); // const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n    // devices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n    // \tif(id === item.mac) {\n    // \t\tlet updated = <BluetoothDeviceItem key={item.mac} mac={item.mac} name={item.name} onClick={this.connect} connectingState={'connecting'}></BluetoothDeviceItem>\t\n    // \t\tbluetoothDevices[currentDevices.findIndex(function(data){ return data.id === id })] = updated;\n    // \t}\n    // });\n    // bluetoothDevices.forEach(element => {\n    // \tconsole.log(element);\n    // \tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n    // \t\tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n    // \t\tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n    // \t\tindexes.forEach(indx => {\n    // \t\t\tbluetoothDevices[indx] = updated;\n    // \t\t});\n    // \t}\n    // \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n    // \t//updating the clicked device to connecting state\n    // \tconsole.log(element);\n    // });\n  };\n\n  return {\n    devices,\n    bluetoothInitialize,\n    connect\n  };\n};\nexport default _Bluetooth;","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","useState","BluetoothDeviceItem","_Bluetooth","state","setState","found","devices","bluetoothInitialize","i","a","name","mac","toString","connected","push","id","connect","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AAKA,OAAOC,mBAAP,MAAgC,uBAAhC;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAE/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAACK,IAAAA,KAAK,EAAE;AAAR,GAAD,CAAlC;AAIA,QAAMC,OAAc,GAAG,EAAvB;;AAEA,QAAMC,mBAAmB,GAAG,MAAM;AAEjC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC3B,UAAIC,CAAC,GAAG;AAACC,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,GAAG,EAAEH,CAAC,CAACI,QAAF,EAApB;AAAkCC,QAAAA,SAAS,EAAC;AAA5C,OAAR;AAEAP,MAAAA,OAAO,CAACQ,IAAR,eAAa,oBAAC,mBAAD;AAAqB,QAAA,GAAG,EAAEL,CAAC,CAACE,GAA5B;AAAiC,QAAA,GAAG,EAAEF,CAAC,CAACE,GAAxC;AAA6C,QAAA,IAAI,EAAEF,CAAC,CAACC,IAArD;AAA2D,QAAA,OAAO,EAAGK,EAAD,IAAQC,OAAO,CAACD,EAAD,CAAnF;AAAyF,QAAA,eAAe,EAAEN,CAAC,CAACI,SAAF,GAAc,WAAd,GAA4B,eAAtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAb;AACA;AACD,GAPD;;AASA,QAAMG,OAAO,GAAID,EAAD,IAAQ;AACvBE,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EADuB,CAEvB;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA,GAlCD;;AAoCA,SACC;AAACZ,IAAAA,OAAD;AAAUC,IAAAA,mBAAV;AAA+BS,IAAAA;AAA/B,GADD;AAGA,CAxDM;AA0DP,eAAed,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport BluetoothLE from '@ionic-native/bluetooth-le';\nimport BluetoothSerial from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem'\n\nexport const _Bluetooth = () => {\n\n\tconst [state, setState] = useState({found: []});\n\n\n\n\tconst devices: any[] = [];\n\n\tconst bluetoothInitialize = () => {\n\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tlet a = {name: \"test\", mac: i.toString(), connected:false}\n\t\t\t\n\t\t\tdevices.push(<BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={(id) => connect(id)} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>);\n\t\t}\n\t}\n\n\tconst connect = (id) => {\n\t\tconsole.log(\"hi\");\n\t\t// const currentDevices = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")[0].children);\n\n\t\t// devices.forEach(item => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n\n\t\t// \tif(id === item.mac) {\n\t\t// \t\tlet updated = <BluetoothDeviceItem key={item.mac} mac={item.mac} name={item.name} onClick={this.connect} connectingState={'connecting'}></BluetoothDeviceItem>\t\n\t\t// \t\tbluetoothDevices[currentDevices.findIndex(function(data){ return data.id === id })] = updated;\n\t\t// \t}\n\n\t\t// });\n\n\t\t// bluetoothDevices.forEach(element => {\n\n\t\t// \tconsole.log(element);\n\n\t\t// \tif ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n\t\t// \t\tlet updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={element.props.name} onClick={this.connect} connectingState='not_connected'></BluetoothDeviceItem>\n\t\t// \t\tlet indexes = bluetoothDevices.map((elm, idx) => elm.props.mac !== id ? idx: '').filter(String);\n\n\t\t// \t\tindexes.forEach(indx => {\n\t\t// \t\t\tbluetoothDevices[indx] = updated;\n\t\t// \t\t});\n\t\t// \t}\n\n\n\t\t// \t//let updated = <BluetoothDeviceItem key={a.mac} mac={a.mac} name={a.name} onClick={this.connect} connectingState={a.connected ? 'connected' : 'not_connected'}></BluetoothDeviceItem>\n\t\t\t\n\t\t// \t//updating the clicked device to connecting state\n\n\t\t// \tconsole.log(element);\n\n\t\t// });\n\t}\n\n\treturn (\n\t\t{devices, bluetoothInitialize, connect}\n\t);\n}\n\nexport default _Bluetooth;\n"]},"metadata":{},"sourceType":"module"}