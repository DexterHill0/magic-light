{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/pages/scan-devices/bluetooth/index.tsx\";\nimport React, { useEffect } from 'react';\nimport { isPlatform } from '@ionic/react';\nimport BluetoothDeviceItem from '../../../components/bluetooth/BluetoothDeviceItem';\nimport { bluetoothDevices } from '../../../globals/globals';\nimport { connect } from 'react-redux';\nimport { setDevices } from '../../../redux/actions/BluetoothDevices';\nimport './index.css';\n\n// class Main extends React.Component<props, MainState> {\n//     bluetooth = new Bluetooth({ble: BluetoothLE, bls: BluetoothSerial});\n//     state = {\n//       isBluetoothNotEnabled: false,\n//       isErrorConnecting: false,\n//       isContinueNoDevice: false,\n//     }\n//   componentDidMount() {\n//     useEffect(() => {\n//       setTimeout(() => this.props.dispatch(setLoader({ isLoading: true })), 2000);\n//     },[])\n//     //this.bluetooth.bluetoothInitialize();\n//     //this.scanClass.scan(10);\n//   }\n//   render() {\n//     return (\n//       <IonContent class=\"main-page\">\n//         <IonHeader>\n//           <IonToolbar class=\"main-toolbar\">\n//             <IonTitle class=\"main-toolbar-title\" size=\"large\">Select A Device</IonTitle>\n//             <IonIcon icon={chevronForward} class=\"next-button\" slot=\"end\"></IonIcon>\n//           </IonToolbar>\n//         </IonHeader>\n//         <IonSpinner class=\"single-refresh-spinner\"></IonSpinner>\n//         <IonContent class=\"mid-content\">\n//           <IonList class=\"device-list\">\n//             {\n//               bluetoothDevices.map(el => el)\n//             }\n//           </IonList>\n//         </IonContent>\n//         <IonFooter>\n//           <IonToolbar class=\"footer-toolbar\">\n//             <IonTabs>\n//               <IonRouterOutlet></IonRouterOutlet>\n//               <IonTabBar slot=\"bottom\" class=\"tab-bar\">\n//                 <IonTabButton tab=\"Wifi\" href=\"/scan-devices/wifi\" disabled={true}>\n//                   <IonIcon icon={wifiOutline} class=\"button-wifi\"></IonIcon> \n//                   <IonLabel class=\"button-wifi button-wifi-label\">Wifi</IonLabel>\n//                 </IonTabButton>\n//                 <IonTabButton tab=\"Bluetooth\" href=\"/scan-devices/bluetooth\">\n//                   <IonIcon icon={bluetoothOutline} class=\"button-bluetooth\"></IonIcon>\n//                   <IonLabel class=\"button-bluetooth button-bluetooth-label\">Bluetooth</IonLabel>\n//                 </IonTabButton>\n//               </IonTabBar>\n//             </IonTabs>\n//           </IonToolbar>\n//         </IonFooter>\n//         <IonAlert\n//           isOpen={this.state.isContinueNoDevice}\n//           header={'Continue?'}\n//           message={'Are you sure you want to continue without selecting a device?'}\n//           buttons={[\n//             { text: 'Cancel', },\n//             {\n//               text: 'Okay',\n//               handler: () => {\n//                 console.log('continue ok'); //move to next screen\n//               }\n//             }\n//           ]}\n//         />\n//         <IonAlert\n//           isOpen={this.state.isBluetoothNotEnabled}\n//           header={'Error'}\n//           message={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n//           buttons={[\n//             {\n//               text: 'Settings',\n//               handler: () => {\n//                 document.addEventListener(\"resume\", () => {\n//                   this.bluetooth.bluetoothInitialize();\n//                   this.bluetooth.scan(10);\n//                 }, false);\n//                 console.log('opening settings');\n//                 OpenNativeSettings.open(\"bluetooth\");\n//               }\n//             },\n//             {\n//               text: 'Okay',\n//               handler: () => {\n//                 this.bluetooth.bluetoothInitialize();\n//                 this.bluetooth.scan(10);\n//               }\n//             }\n//           ]\n//         }\n//         />\n//         <IonAlert\n//           isOpen={this.state.isErrorConnecting}\n//           header={'Error'}\n//           message={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n//           buttons={['OK']}\n//         />\n//       </IonContent>\n//     );\n//   };\n// };\n// export default Main;\nconst HomePage = props => {\n  useEffect(() => {\n    setTimeout(() => props.dispatch(setDevices({\n      devices: []\n    })), 2000);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 18\n    }\n  }, \"The page is loading... Please wait.\"));\n};\n\nexport default connect(props => ({\n  isLoading: props.uiel.loader.isLoading\n}))(HomePage);\n\nclass Bluetooth extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = (state, id) => {\n      console.log(this.state);\n      let index = this.state.devices.findIndex(function (data) {\n        return data.mac === id;\n      });\n      this.setState({\n        devices: [...this.state.devices, this.state.devices[index].connectingState = state]\n      });\n      console.log(this.state);\n    };\n\n    this.scan = async timeout => {\n      if (this.state.isCordova) {\n        //this.props.ble.stopScan(); //stop any current scans\n        console.log(\"scanning!\"); // this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n        //   if(result.status === \"scanResult\") {\n        //     this.devices.push(result);\n        //   }\n        //   else if(result.status !== \"scanStarted\") {\n        //     this.checkEnabled();\n        //   }\n        // });\n\n        this.props.bls.discoverUnpaired().then(function (result) {\n          console.log(result);\n        });\n        await this.timeout(timeout); //this.props.ble.stopScan();\n\n        console.log(\"stopped scan!\");\n      }\n    };\n\n    this.connect = id => {\n      bluetoothDevices.forEach(element => {\n        //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n        let state = element;\n        console.log(state);\n\n        if ((element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n          const currDev = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\")); //let updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={\"hf\"} onClick={this.connect}></BluetoothDeviceItem>\n          //currDev[Array.prototype.slice.call(currDev[0].children).findIndex(function(data){ return data.id === id })] = updated;\n        }\n\n        if (element.props.connectingState === 'connecting') {//stop the connection / disconnect\n        } else if (element.props.connectingState === 'connected') {//disconnect device\n        }\n      });\n    };\n\n    this.state = {\n      devices: [],\n      isCordova: false\n    };\n  }\n\n  bluetoothInitialize() {\n    for (let i = 0; i < 5; i++) {\n      let a = /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n        key: i,\n        mac: i.toString(),\n        name: \"device_\" + i,\n        connectingState: 'not_connected',\n        onClick: (state, id) => this.handleClick(state, id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }\n      });\n      this.state.devices.push({\n        name: \"device_\" + i,\n        mac: i.toString(),\n        connectingState: 'not_connected'\n      });\n      bluetoothDevices.push(a);\n    }\n\n    if (!isPlatform('cordova')) {\n      console.log(\"platform not cordova, BLE will not work!\");\n      this.setState({\n        isCordova: true\n      });\n      return;\n    }\n\n    this.checkEnabled(); // await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n    //   if(result.status === \"disabled\") {\n    //     this.checkEnabled();\n    //   }\n    // });\n  }\n\n  checkEnabled() {//this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n    //this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n  }\n\n  timeout(s) {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  }\n\n} //https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/pages/scan-devices/bluetooth/index.tsx"],"names":["React","useEffect","isPlatform","BluetoothDeviceItem","bluetoothDevices","connect","setDevices","HomePage","props","setTimeout","dispatch","devices","isLoading","uiel","loader","Bluetooth","Component","constructor","handleClick","state","id","console","log","index","findIndex","data","mac","setState","connectingState","scan","timeout","isCordova","bls","discoverUnpaired","then","result","forEach","element","currDev","Array","prototype","slice","call","document","getElementsByClassName","bluetoothInitialize","i","a","toString","push","name","checkEnabled","s","Promise","resolve"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { \n  IonHeader, \n  IonToolbar, \n  IonTitle, \n  IonContent, \n  IonList, \n  IonIcon, \n  IonAlert, \n  IonTabs, \n  IonTabBar, \n  IonTabButton, \n  IonRouterOutlet, \n  IonLabel, \n  IonSpinner, \n  IonFooter, \n  isPlatform \n} from '@ionic/react';\nimport { \n  chevronForward, \n  wifiOutline, \n  bluetoothOutline \n} from 'ionicons/icons';\n\nimport { BluetoothLE } from '@ionic-native/bluetooth-le';\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial';\nimport { OpenNativeSettings } from '@ionic-native/open-native-settings';\n\nimport BluetoothDeviceItem from '../../../components/bluetooth/BluetoothDeviceItem';\n\nimport { bluetoothDevices }  from '../../../globals/globals'\n\nimport { connect } from 'react-redux';\nimport { setDevices } from '../../../redux/actions/BluetoothDevices';\n\nimport './index.css';\n\ninterface MainState {\n  isBluetoothNotEnabled: boolean;\n  isErrorConnecting: boolean;\n  isContinueNoDevice: boolean;\n}\n\n// class Main extends React.Component<props, MainState> {\n//     bluetooth = new Bluetooth({ble: BluetoothLE, bls: BluetoothSerial});\n\n//     state = {\n//       isBluetoothNotEnabled: false,\n//       isErrorConnecting: false,\n//       isContinueNoDevice: false,\n//     }\n\n//   componentDidMount() {\n\n//     useEffect(() => {\n//       setTimeout(() => this.props.dispatch(setLoader({ isLoading: true })), 2000);\n//     },[])\n\n//     //this.bluetooth.bluetoothInitialize();\n//     //this.scanClass.scan(10);\n//   }\n\n//   render() {\n//     return (\n//       <IonContent class=\"main-page\">\n\n//         <IonHeader>\n//           <IonToolbar class=\"main-toolbar\">\n//             <IonTitle class=\"main-toolbar-title\" size=\"large\">Select A Device</IonTitle>\n//             <IonIcon icon={chevronForward} class=\"next-button\" slot=\"end\"></IonIcon>\n//           </IonToolbar>\n//         </IonHeader>\n//         <IonSpinner class=\"single-refresh-spinner\"></IonSpinner>\n        \n//         <IonContent class=\"mid-content\">\n\n//           <IonList class=\"device-list\">\n//             {\n//               bluetoothDevices.map(el => el)\n//             }\n//           </IonList>\n//         </IonContent>\n\n//         <IonFooter>\n//           <IonToolbar class=\"footer-toolbar\">\n//             <IonTabs>\n//               <IonRouterOutlet></IonRouterOutlet>\n//               <IonTabBar slot=\"bottom\" class=\"tab-bar\">\n//                 <IonTabButton tab=\"Wifi\" href=\"/scan-devices/wifi\" disabled={true}>\n//                   <IonIcon icon={wifiOutline} class=\"button-wifi\"></IonIcon> \n//                   <IonLabel class=\"button-wifi button-wifi-label\">Wifi</IonLabel>\n//                 </IonTabButton>\n//                 <IonTabButton tab=\"Bluetooth\" href=\"/scan-devices/bluetooth\">\n//                   <IonIcon icon={bluetoothOutline} class=\"button-bluetooth\"></IonIcon>\n//                   <IonLabel class=\"button-bluetooth button-bluetooth-label\">Bluetooth</IonLabel>\n\n//                 </IonTabButton>\n//               </IonTabBar>\n//             </IonTabs>\n//           </IonToolbar>\n//         </IonFooter>\n//         <IonAlert\n//           isOpen={this.state.isContinueNoDevice}\n//           header={'Continue?'}\n//           message={'Are you sure you want to continue without selecting a device?'}\n//           buttons={[\n//             { text: 'Cancel', },\n//             {\n//               text: 'Okay',\n//               handler: () => {\n//                 console.log('continue ok'); //move to next screen\n//               }\n//             }\n//           ]}\n//         />\n//         <IonAlert\n//           isOpen={this.state.isBluetoothNotEnabled}\n//           header={'Error'}\n//           message={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n//           buttons={[\n//             {\n//               text: 'Settings',\n//               handler: () => {\n//                 document.addEventListener(\"resume\", () => {\n//                   this.bluetooth.bluetoothInitialize();\n//                   this.bluetooth.scan(10);\n//                 }, false);\n//                 console.log('opening settings');\n//                 OpenNativeSettings.open(\"bluetooth\");\n//               }\n//             },\n//             {\n//               text: 'Okay',\n//               handler: () => {\n//                 this.bluetooth.bluetoothInitialize();\n//                 this.bluetooth.scan(10);\n//               }\n//             }\n//           ]\n//         }\n//         />\n//         <IonAlert\n//           isOpen={this.state.isErrorConnecting}\n//           header={'Error'}\n//           message={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n//           buttons={['OK']}\n//         />\n//       </IonContent>\n//     );\n//   };\n// };\n// export default Main;\n\nconst HomePage: React.FC = (props) => {\n  useEffect(() => {\n       setTimeout(() => props.dispatch(setDevices({ devices: [] })), 2000);\n  },[])\n\n  return (\n       \n            <div>\n                 <p>The page is loading... Please wait.</p>\n            </div> \n       \n  );\n}\n\nexport default connect((props: any) => ({\n  isLoading: props.uiel.loader.isLoading\n}))(HomePage);\n\n\n\n\ninterface Props {\n  ble: typeof BluetoothLE;\n  bls: typeof BluetoothSerial;\n}\ninterface BluetoothState {\n  devices: any[];\n  isCordova: boolean;\n}\n\nclass Bluetooth extends React.Component<Props, BluetoothState> {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      devices: [\n      ],\n      isCordova: false,\n    };\n\n   }\n\n   handleClick = (state, id) => {\n    console.log(this.state);\n\n     let index = this.state.devices.findIndex(function(data){return data.mac === id})\n      this.setState({devices: [...this.state.devices, this.state.devices[index].connectingState = state]});\n      \n      console.log(this.state);\n   }\n\n   scan = async (timeout) => {\n    if(this.state.isCordova) {\n      //this.props.ble.stopScan(); //stop any current scans\n\n      console.log(\"scanning!\");\n\n      // this.props.ble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n      //   if(result.status === \"scanResult\") {\n      //     this.devices.push(result);\n      //   }\n      //   else if(result.status !== \"scanStarted\") {\n      //     this.checkEnabled();\n      //   }\n      // });\n\n      this.props.bls.discoverUnpaired().then(function(result) {\n        console.log(result);\n      });\n\n      await this.timeout(timeout);\n      //this.props.ble.stopScan();\n\n      console.log(\"stopped scan!\");\n    }\n  }\n\n  bluetoothInitialize() {\n\n    for(let i = 0; i < 5; i++) {\n        let a = <BluetoothDeviceItem key={i} mac={i.toString()} name={\"device_\"+i} connectingState={'not_connected'} onClick={(state, id) => this.handleClick(state, id)}></BluetoothDeviceItem>\n\n        this.state.devices.push( {name: \"device_\"+i, mac: i.toString(), connectingState: 'not_connected' } )\n        \n      bluetoothDevices.push(a);\n    }\n\n    if (!isPlatform('cordova')) {\n      console.log(\"platform not cordova, BLE will not work!\");\n      this.setState({isCordova: true});\n      return;\n    }\n\n    this.checkEnabled();\n\n    // await this.props.ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n    //   if(result.status === \"disabled\") {\n    //     this.checkEnabled();\n    //   }\n    // });\n\n  }\n\n  connect = (id) => {\n    bluetoothDevices.forEach(element => { //disconnecting any other currently connected devices and updating them in the list (setting them back to not connected)\n      let state = element;\n      console.log(state);\n      if( (element.props.connectingState === 'connecting' || element.props.connectingState === 'connected') && element.props.mac !== id) {\n        const currDev = Array.prototype.slice.call(document.getElementsByClassName(\"device-list\"));\n        //let updated = <BluetoothDeviceItem key={element.props.mac} mac={element.props.mac} name={\"hf\"} onClick={this.connect}></BluetoothDeviceItem>\n\n        //currDev[Array.prototype.slice.call(currDev[0].children).findIndex(function(data){ return data.id === id })] = updated;\n      }\n      if(element.props.connectingState === 'connecting'){\n        //stop the connection / disconnect\n      }\n      else if(element.props.connectingState === 'connected'){\n        //disconnect device\n      }\n    });\n  }\n\n\n  private checkEnabled() {\n\n    //this.props.ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n    //this.props.ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\n  }\n\n  private timeout(s) {\n    return new Promise(resolve => setTimeout(resolve, s*1000));\n  } \n}\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n"]},"metadata":{},"sourceType":"module"}