{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\nimport React, { createRef } from 'react';\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n  let states = {};\n  let deviceRefs = {};\n  const deviceItems = [];\n\n  const bluetoothInitialize = async () => {\n    await ble.initialize({\n      \"request\": true,\n      \"statusReceiver\": false,\n      \"restoreKey\": \"magic-light-ble\"\n    }).subscribe(result => {\n      if (result.status === \"disabled\") {\n        checkEnabled();\n      }\n    });\n  };\n\n  const checkEnabled = () => {//ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n    //ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n  };\n\n  const scan = async timeout => {\n    ble.stopScan(); //stop any current scans\n\n    console.log(\"scanning!\");\n    ble.startScan({\n      \"allowDuplicates\": false,\n      \"isConnectable\": true\n    }).subscribe(result => {\n      if (result.status === \"scanResult\") {\n        createDeviceItem(result);\n      } else if (result.status !== \"scanStarted\") {\n        checkEnabled();\n      }\n    }); // bls.discoverUnpaired().then(function (result) {\n    // \tconsole.log(result);\n    // });\n\n    await timeout(timeout);\n    ble.stopScan();\n    console.log(\"stopped scan!\");\n  };\n\n  const connect = id => {};\n\n  const checkAlreadyConnecting = id => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if (id === item.props.mac) {\n        updateDeviceItemState(item.props.mac, 'connecting');\n      }\n\n      if ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n        updateDeviceItemState(item.props.mac, 'not_connected');\n        deviceRefs[item.props.mac].current.rerender();\n      }\n    });\n  };\n\n  const createDeviceItem = data => {\n    console.log(data);\n    states = { ...states,\n      [data.mac]: data.connected ? 'connected' : 'not_connected'\n    };\n    deviceRefs = { ...deviceRefs,\n      [data.mac]: createRef()\n    };\n    deviceItems.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      ref: deviceRefs[data.mac],\n      key: data.mac,\n      mac: data.mac,\n      name: data.name,\n      onClick: id => connect(id),\n      state: () => {\n        return states[data.mac];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 20\n      }\n    }));\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState;\n  };\n\n  const timeout = s => {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize,\n    scan\n  };\n};\n\nexport default _Bluetooth;\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n  \t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t\t}, false);\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n}","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","createRef","BluetoothLE","ble","BluetoothDeviceItem","_Bluetooth","states","deviceRefs","deviceItems","bluetoothInitialize","initialize","subscribe","result","status","checkEnabled","scan","timeout","stopScan","console","log","startScan","createDeviceItem","connect","id","checkAlreadyConnecting","forEach","item","props","mac","updateDeviceItemState","state","current","rerender","data","connected","push","name","connectingState","s","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n\n\nimport React, { createRef, useRef } from 'react';\n\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le';\nimport { BluetoothSerial as bls } from '@ionic-native/bluetooth-serial';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n\n\tlet states: {} = {};\n\tlet deviceRefs: {} = {};\n\tconst deviceItems: any[] = [];\n\n\tconst bluetoothInitialize = async () => {\n\t\tawait ble.initialize( {\"request\": true, \"statusReceiver\": false, \"restoreKey\": \"magic-light-ble\"} ).subscribe((result) => {\n\t\t\tif(result.status === \"disabled\") {\n\t\t\t\tcheckEnabled();\n\t\t\t}\n\t\t});\n\t}\n\n\tconst checkEnabled = () => {\n\t\t//ble.isEnabled().then(isEnabled); //is bluetooth le enabled\n\t\t//ble.isEnabled().then(resp => !resp.isEnabled ? this.setState({isBluetoothEnabled: false}) : this.setState({isBluetoothEnabled: true}) );\n\t}\n\n\n\tconst scan = async (timeout) => {\n\t\tble.stopScan(); //stop any current scans\n\n\t\tconsole.log(\"scanning!\");\n\n\t\tble.startScan( {\"allowDuplicates\": false, \"isConnectable\": true}  ).subscribe((result) => {\n\t\t\tif(result.status === \"scanResult\") {\n\t\t\t\tcreateDeviceItem(result);\n\t\t\t}\n\t\t\telse if(result.status !== \"scanStarted\") {\n\t\t\t\tcheckEnabled();\n\t\t\t}\n\t\t});\n\n\t\t// bls.discoverUnpaired().then(function (result) {\n\t\t// \tconsole.log(result);\n\t\t// });\n\n\t\tawait timeout(timeout);\n\t\tble.stopScan();\n\n\t\tconsole.log(\"stopped scan!\");\n\t}\n\n\tconst connect = (id) => {\n\n\t}\n\n\tconst checkAlreadyConnecting = (id) => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif(id === item.props.mac) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'connecting');\n\t\t\t}\n\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t\tdeviceRefs[item.props.mac].current.rerender();\n\t\t\t}\n\n\t\t});\n\t}\n\n\tconst createDeviceItem = (data) => {\n\t\tconsole.log(data);\n\n\t\tstates = {...states, [data.mac]: data.connected ? 'connected' : 'not_connected'}\n\t\tdeviceRefs = {...deviceRefs, [data.mac]: createRef<BluetoothDeviceItem>()};\n\t\tdeviceItems.push(<BluetoothDeviceItem ref={deviceRefs[data.mac]} key={data.mac} mac={data.mac} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.mac]}}></BluetoothDeviceItem>);\n\t}\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;\n\t}\n\tconst timeout = (s) => {\n\t\treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize, scan}\n\t);\n}\nexport default _Bluetooth;\n\n\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tdocument.addEventListener(\"resume\", () => {\n\t\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}