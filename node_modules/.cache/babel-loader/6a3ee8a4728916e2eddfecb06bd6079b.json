{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\nimport React, { createRef } from 'react';\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le/';\nimport { OpenNativeSettings } from '@ionic-native/open-native-settings';\nimport isEqual from 'lodash.isequal';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n  let states = {};\n  let deviceRefs = {};\n  let deviceItems = [];\n  const serviceUuids = [];\n  const ble = new Bluetooth();\n\n  const bluetoothInitialize = () => {\n    ble.initialize();\n  };\n\n  const scan = async t => {\n    let d = await ble.scan(t);\n    d.forEach(e => {\n      if (!checkAlreadyExists(e)) {\n        createDeviceItem(e, true);\n      }\n    });\n  };\n\n  const connect = id => {\n    updateDeviceItemState(id, 'connecting');\n    checkAlreadyConnecting(id);\n    ble.connect(id);\n  };\n\n  const checkAlreadyExists = d => {\n    let a = false;\n    deviceItems.forEach(item => {\n      if (d.address === item.props.mac) {\n        a = true;\n      }\n    });\n    return a;\n  };\n\n  const isAnyConnected = () => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if (item.props.state() === 'connecting' || item.props.state() === 'connected') {\n        return true;\n      }\n    });\n    return false;\n  };\n\n  const checkAlreadyConnecting = id => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n        updateDeviceItemState(item.props.mac, 'not_connected');\n        deviceRefs[item.props.mac].current.rerender();\n        ble.disconnect(item.props.mac);\n      }\n    });\n  };\n\n  const createDeviceItem = (data, isFromUnpaired) => {\n    if (states[data.address] === \"\") {\n      return; //device already added to list\n    }\n\n    if (isFromUnpaired) {\n      serviceUuids.push(...data.advertisement.serviceUuids);\n      states = { ...states,\n        [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'\n      };\n    }\n\n    deviceRefs = { ...deviceRefs,\n      [data.address]: createRef()\n    };\n    deviceItems.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      key: data.address,\n      ref: deviceRefs[data.address],\n      mac: data.address,\n      name: data.name,\n      onClick: id => connect(id),\n      state: () => {\n        return states[data.address];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }\n    }));\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState;\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize,\n    scan,\n    isAnyConnected\n  };\n};\n\nexport default _Bluetooth;\n\nclass Bluetooth {\n  constructor() {\n    this.isEnabled = void 0;\n    this.devices = [];\n    this.isEnabled = false;\n  }\n\n  initialize() {\n    ble.initialize({\n      \"request\": true,\n      \"statusReceiver\": true,\n      \"restoreKey\": \"magic-light-ble\"\n    }).subscribe(result => {\n      if (result.status == \"disabled\") {\n        this.isEnabled = false;\n        document.addEventListener(\"resume\", this.onResume, true);\n        this.alert(\"Error\", \"\", \"Bluetooth is not enabled. Please enable Bluetooth and try again.\", [{\n          text: 'Settings',\n          handler: () => {\n            OpenNativeSettings.open(\"bluetooth\");\n          }\n        }, {\n          text: 'Okay',\n          handler: () => {\n            this.onResume();\n          }\n        }]);\n      } else {\n        this.isEnabled = true;\n      }\n    });\n    ble.stopScan();\n  }\n\n  async scan(scantime) {\n    if (this.isEnabled) {\n      ble.startScan({\n        \"allowDuplicates\": false\n      }).subscribe(result => {\n        if (result.status === \"scanResult\") {\n          this.pushIfNotExists(result);\n        }\n      });\n      await this.timeout(scantime);\n      ble.stopScan().then(result => {\n        if (result.status !== \"scanStopped\") {//warn user?\n        }\n      });\n    }\n\n    return this.devices;\n  }\n\n  async connect(id) {\n    this.alert(\"Error\", \"\", \"There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.\", ['OK']);\n    return false;\n  }\n\n  async disconnect(id) {\n    return false;\n  }\n\n  pushIfNotExists(d) {\n    let count = 0;\n\n    if (this.devices.length > 0) {\n      this.devices.forEach(e => {\n        if (!isEqual(d, e)) {\n          count++;\n        }\n      });\n\n      if (count >= this.devices.length) {\n        this.devices.push(d);\n      }\n    } else {\n      this.devices.push(d);\n    }\n  }\n\n  async alert(header, sub, message, buttons) {\n    const alert = document.createElement('ion-alert');\n    alert.header = header;\n    alert.subHeader = sub;\n    alert.message = message;\n    alert.buttons = buttons;\n    document.body.appendChild(alert);\n    return await alert.present();\n  }\n\n  timeout(s) {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  }\n\n  onResume() {\n    ble.isEnabled().then(result => {\n      if (result.isEnabled) {\n        this.isEnabled = true; //document.removeEventListener(\"resume\", this.onResume);\n      }\n    });\n  }\n\n}\n\n{\n  /* \n  \n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n}","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","createRef","BluetoothLE","ble","OpenNativeSettings","isEqual","BluetoothDeviceItem","_Bluetooth","states","deviceRefs","deviceItems","serviceUuids","Bluetooth","bluetoothInitialize","initialize","scan","t","d","forEach","e","checkAlreadyExists","createDeviceItem","connect","id","updateDeviceItemState","checkAlreadyConnecting","a","item","address","props","mac","isAnyConnected","state","current","rerender","disconnect","data","isFromUnpaired","push","advertisement","isConnectable","name","connectingState","constructor","isEnabled","devices","subscribe","result","status","document","addEventListener","onResume","alert","text","handler","open","stopScan","scantime","startScan","pushIfNotExists","timeout","then","count","length","header","sub","message","buttons","createElement","subHeader","body","appendChild","present","s","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\nimport React, { createRef } from 'react';\n\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le/';\nimport { OpenNativeSettings } from '@ionic-native/open-native-settings'\nimport isEqual from 'lodash.isequal';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nconst _Bluetooth = () => {\n\n\tlet states: {} = {};\n\tlet deviceRefs: {} = {};\n\tlet deviceItems: any[] = [];\n\n\tconst serviceUuids: string[] = [];\n\n\tconst ble = new Bluetooth();\n\n\tconst bluetoothInitialize = () => {\n\t\tble.initialize();\n\t}\n\n\tconst scan = async (t) => {\n\t\tlet d = await ble.scan(t);\n\t\td.forEach(e => {\n\t\t\tif(!checkAlreadyExists(e)) {\n\t\t\t\tcreateDeviceItem(e, true);\n\t\t\t}\n\t\t})\n\t}\n\n\tconst connect = (id) => {\n\t\tupdateDeviceItemState(id, 'connecting');\n\t\tcheckAlreadyConnecting(id);\n\n\t\tble.connect(id);\n\t}\n\n\tconst checkAlreadyExists = (d) => {\n\t\tlet a = false;\n\t\tdeviceItems.forEach(item => { \n\t\t\tif(d.address === item.props.mac) {\n\t\t\t\ta = true;\n\t\t\t}\n\t\t});\n\t\treturn a;\n\t}\n\n\tconst isAnyConnected = () => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn false;\n\t}\n\n\tconst checkAlreadyConnecting = (id) => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t\tdeviceRefs[item.props.mac].current.rerender();\n\n\t\t\t\tble.disconnect(item.props.mac);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst createDeviceItem = (data, isFromUnpaired) => {\n\t\tif(states[data.address] === \"\"){\n\t\t\treturn; //device already added to list\n\t\t}\n\t\tif(isFromUnpaired) {\n\t\t\tserviceUuids.push(...data.advertisement.serviceUuids);\n\t\t\tstates = {...states, [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'};\n\t\t}\n\n\t\tdeviceRefs = {...deviceRefs, [data.address]: createRef<BluetoothDeviceItem>()};\n\t\tdeviceItems.push(<BluetoothDeviceItem key={data.address} ref={deviceRefs[data.address]} mac={data.address} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.address]}}></BluetoothDeviceItem>);\n\t}\n\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize, scan, isAnyConnected}\n\t);\n}\nexport default _Bluetooth; \n\n\nclass Bluetooth {\n\tisEnabled: boolean;\n\tdevices: any[] = [];\n\n\tconstructor() {\n\t\tthis.isEnabled = false;\n\t}\n\n\tinitialize(): void {\t\n\t\tble.initialize({\n\t\t\t\"request\": true,\n\t\t\t\"statusReceiver\": true,\n\t\t\t\"restoreKey\": \"magic-light-ble\"\n\t\t}).subscribe((result) => {\n\t\t\tif (result.status == \"disabled\") {\n\t\t\t\tthis.isEnabled = false;\n\t\t\t\tdocument.addEventListener(\"resume\", this.onResume, true);\n\t\t\t\tthis.alert(\n\t\t\t\t\t\"Error\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"Bluetooth is not enabled. Please enable Bluetooth and try again.\",\n\t\t\t\t\t[{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => { OpenNativeSettings.open(\"bluetooth\");}\n\t\t\t\t\t\t},{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => { this.onResume(); }\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.isEnabled = true;\n\t\t\t}\n\t\t});\n\n\t\tble.stopScan();\n\t}\n\n\tasync scan(scantime): Promise<any[]> {\n\t\tif(this.isEnabled) {\n\t\t\tble.startScan({\n\t\t\t\t\"allowDuplicates\": false,\n\t\t\t}).subscribe((result) => {\n\t\t\t\tif(result.status === \"scanResult\") {\n\t\t\t\t\tthis.pushIfNotExists(result);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tawait this.timeout(scantime);\n\n\t\t\tble.stopScan().then((result) => {\n\t\t\t\tif(result.status !== \"scanStopped\") {\n\t\t\t\t\t//warn user?\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this.devices;\n\t}\n\n\tasync connect(id): Promise<boolean> {\n\t\tthis.alert(\n\t\t\t\"Error\",\n\t\t\t\"\",\n\t\t\t\"There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.\",\n\t\t\t['OK']);\n\n\t\treturn false;\n\t}\n\n\tasync disconnect(id): Promise<boolean> {\n\t\treturn false;\n\t}\n\n\n\tpushIfNotExists(d): void {\n\t\tlet count = 0;\n\t\tif(this.devices.length > 0) {\n\t\t\tthis.devices.forEach(e => {\n\t\t\t\tif(!isEqual(d, e)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(count >= this.devices.length) {\n\t\t\t\tthis.devices.push(d);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.devices.push(d);\n\t\t}\n\t}\n\n\tasync alert(header, sub, message, buttons): Promise<void> {\n\t\tconst alert = document.createElement('ion-alert');\n\t\talert.header = header;\n\t\talert.subHeader = sub;\n\t\talert.message = message;\n\t\talert.buttons = buttons;\n\n\t\tdocument.body.appendChild(alert);\n\t\treturn await alert.present();\n\t}\n\n\ttimeout(s): Promise<object> {\n\t\treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t}\n \n\tonResume(): void {\n\t\tble.isEnabled().then((result) => {\n\t\t\tif(result.isEnabled){\n\t\t\t\tthis.isEnabled = true;\n\t\t\t\t//document.removeEventListener(\"resume\", this.onResume);\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n{/* \n\n\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}