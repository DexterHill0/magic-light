{"ast":null,"code":"var _jsxFileName = \"/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx\";\n//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n//bond/unbond\n//discover\nimport React, { createRef } from 'react';\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le/';\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\nimport isEqual from 'lodash.isequal';\n\nconst _Bluetooth = () => {\n  let states = {};\n  let deviceRefs = {};\n  let deviceItems = [];\n  const serviceUuids = [];\n  const ble = new Bluetooth();\n\n  const bluetoothInitialize = () => {\n    ble.initialize();\n  };\n\n  const scan = async t => {\n    let d = await ble.scan(t);\n    d.forEach(e => {\n      if (!checkAlreadyExists(e)) {\n        createDeviceItem(e, true);\n      }\n    });\n  };\n\n  const connect = id => {\n    updateDeviceItemState(id, 'connecting');\n    checkAlreadyConnecting(id);\n  };\n\n  const checkAlreadyExists = d => {\n    let a = false;\n    deviceItems.forEach(item => {\n      if (d.address === item.props.mac) {\n        a = true;\n      }\n    });\n    return a;\n  };\n\n  const checkAlreadyConnecting = id => {\n    deviceItems.forEach(item => {\n      //disconnecting any other currently connected devices and changing their respective states\n      if ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n        updateDeviceItemState(item.props.mac, 'not_connected');\n        deviceRefs[item.props.mac].current.rerender();\n      }\n    });\n  };\n\n  const createDeviceItem = (data, isFromUnpaired) => {\n    if (states[data.address] === \"\") {\n      return; //device already added to list\n    }\n\n    if (isFromUnpaired) {\n      serviceUuids.push(...data.advertisement.serviceUuids);\n      states = { ...states,\n        [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'\n      };\n    }\n\n    deviceRefs = { ...deviceRefs,\n      [data.address]: createRef()\n    };\n    deviceItems.push( /*#__PURE__*/React.createElement(BluetoothDeviceItem, {\n      key: data.address,\n      ref: deviceRefs[data.address],\n      mac: data.address,\n      name: data.name,\n      onClick: id => connect(id),\n      state: () => {\n        return states[data.address];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 20\n      }\n    }));\n  };\n\n  const updateDeviceItemState = (id, connectingState) => {\n    states[id] = connectingState;\n  };\n\n  return {\n    deviceItems,\n    bluetoothInitialize,\n    scan\n  };\n};\n\nexport default _Bluetooth;\n\nclass Bluetooth {\n  constructor() {\n    this.isEnabled = void 0;\n    this.devices = [];\n    this.isEnabled = false;\n  }\n\n  initialize() {\n    ble.initialize({\n      \"request\": true,\n      \"statusReceiver\": true,\n      \"restoreKey\": \"magic-light-ble\"\n    }).subscribe(result => {\n      if (result.status == \"disabled\") {\n        const alert = document.createElement('ion-alert');\n        alert.cssClass = 'my-custom-class';\n        alert.header = 'Alert';\n        alert.subHeader = 'Subtitle';\n        alert.message = 'This is an alert message.';\n        alert.buttons = ['OK'];\n        document.body.appendChild(alert);\n        return alert.present();\n        this.isEnabled = false;\n        document.addEventListener(\"resume\", this.onResume);\n      } else {\n        this.isEnabled = true;\n      }\n    });\n    ble.stopScan();\n  }\n\n  async scan(scantime) {\n    if (this.isEnabled) {\n      ble.startScan({\n        \"allowDuplicates\": false\n      }).subscribe(result => {\n        if (result.status === \"scanResult\") {\n          this.pushIfNotExists(result);\n        }\n      });\n      await this.timeout(scantime);\n      ble.stopScan().then(result => {\n        if (result.status !== \"scanStopped\") {//warn user?\n        }\n      });\n    }\n\n    return this.devices;\n  }\n\n  pushIfNotExists(d) {\n    let count = 0;\n\n    if (this.devices.length > 0) {\n      this.devices.forEach(e => {\n        if (!isEqual(d, e)) {\n          count++;\n        }\n      });\n\n      if (count >= this.devices.length) {\n        this.devices.push(d);\n      }\n    } else {\n      this.devices.push(d);\n    }\n  }\n\n  timeout(s) {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  }\n\n  onResume() {\n    ble.isEnabled().then(result => {\n      if (result.isEnabled) {\n        this.isEnabled = true;\n        document.removeEventListener(\"resume\", this.onResume);\n      }\n    });\n  }\n\n} //\n\n\n{\n  /* <IonAlert\n  \t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\theader={'Error'}\n  \t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\tbuttons={[\n  \t\t\t{\n  \t\t\t\ttext: 'Settings',\n  \t\t\t\thandler: () => {\n  \t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t{\n  \t\t\t\ttext: 'Okay',\n  \t\t\t\thandler: () => {\n  \t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t]\n  \t}\n  \t/>\n  */\n}\n{\n  /* <IonAlert\n  \t\t\t\tisOpen={this.state.isContinueNoDevice}\n  \t\t\t\theader={'Continue?'}\n  \t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{ text: 'Cancel', },\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n  \t\t\t\tbuttons={[\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Settings',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tconsole.log('opening settings');\n  \t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t\t{\n  \t\t\t\t\t\ttext: 'Okay',\n  \t\t\t\t\t\thandler: () => {\n  \t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n  \t\t\t\t\t\t\tthis.bluetooth.scan(10);\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t]\n  \t\t\t}\n  \t\t\t/>\n  \t\t\t<IonAlert\n  \t\t\t\tisOpen={this.state.isErrorConnecting}\n  \t\t\t\theader={'Error'}\n  \t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n  \t\t\t\tbuttons={['OK']}\n  \t\t\t/>\n  */\n}","map":{"version":3,"sources":["/Users/everyone/Desktop/iPhone app/magic-light/src/components/bluetooth/Bluetooth.tsx"],"names":["React","createRef","BluetoothLE","ble","BluetoothDeviceItem","isEqual","_Bluetooth","states","deviceRefs","deviceItems","serviceUuids","Bluetooth","bluetoothInitialize","initialize","scan","t","d","forEach","e","checkAlreadyExists","createDeviceItem","connect","id","updateDeviceItemState","checkAlreadyConnecting","a","item","address","props","mac","state","current","rerender","data","isFromUnpaired","push","advertisement","isConnectable","name","connectingState","constructor","isEnabled","devices","subscribe","result","status","alert","document","createElement","cssClass","header","subHeader","message","buttons","body","appendChild","present","addEventListener","onResume","stopScan","scantime","startScan","pushIfNotExists","timeout","then","count","length","s","Promise","resolve","setTimeout","removeEventListener"],"mappings":"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","sourcesContent":["//https://www.npmjs.com/package/cordova-plugin-bluetoothle\n\n//startScan => connect => ...\n//                        disconnect => close\n//                        connect => disconnect => close => connect\n//::updating icons::\n\n//bond/unbond\n//discover\n\n\n\nimport React, { createRef } from 'react';\n\nimport { BluetoothLE as ble } from '@ionic-native/bluetooth-le/';\n\nimport BluetoothDeviceItem from './BluetoothDeviceItem';\n\nimport isEqual from 'lodash.isequal';\n\nconst _Bluetooth = () => {\n\n\tlet states: {} = {};\n\tlet deviceRefs: {} = {};\n\tlet deviceItems: any[] = [];\n\n\tconst serviceUuids: string[] = [];\n\n\tconst ble = new Bluetooth();\n\n\tconst bluetoothInitialize = () => {\n\t\tble.initialize();\n\t}\n\n\tconst scan = async (t) => {\n\t\tlet d = await ble.scan(t);\n\t\td.forEach(e => {\n\t\t\tif(!checkAlreadyExists(e)) {\n\t\t\t\tcreateDeviceItem(e, true);\n\t\t\t}\n\t\t})\n\t}\n\n\tconst connect = (id) => {\n\t\tupdateDeviceItemState(id, 'connecting');\n\t\tcheckAlreadyConnecting(id);\n\t}\n\n\tconst checkAlreadyExists = (d) => {\n\t\tlet a = false;\n\t\tdeviceItems.forEach(item => { \n\t\t\tif(d.address === item.props.mac) {\n\t\t\t\ta = true;\n\t\t\t}\n\t\t});\n\t\treturn a;\n\t}\n\n\tconst checkAlreadyConnecting = (id) => {\n\t\tdeviceItems.forEach(item => { //disconnecting any other currently connected devices and changing their respective states\n\t\t\tif ((item.props.state() === 'connecting' || item.props.state() === 'connected') && item.props.mac !== id) {\n\t\t\t\tupdateDeviceItemState(item.props.mac, 'not_connected');\n\t\t\t\tdeviceRefs[item.props.mac].current.rerender();\n\t\t\t}\n\t\t});\n\t}\n\n\tconst createDeviceItem = (data, isFromUnpaired) => {\n\t\tif(states[data.address] === \"\"){\n\t\t\treturn; //device already added to list\n\t\t}\n\t\tif(isFromUnpaired) {\n\t\t\tserviceUuids.push(...data.advertisement.serviceUuids);\n\t\t\tstates = {...states, [data.address]: data.advertisement.isConnectable ? 'not_connected' : 'connected'};\n\t\t}\n\n\t\tdeviceRefs = {...deviceRefs, [data.address]: createRef<BluetoothDeviceItem>()};\n\t\tdeviceItems.push(<BluetoothDeviceItem key={data.address} ref={deviceRefs[data.address]} mac={data.address} name={data.name} onClick={(id) => connect(id)} state={() => {return states[data.address]}}></BluetoothDeviceItem>);\n\t}\n\n\tconst updateDeviceItemState = (id, connectingState) => {\n\t\tstates[id] = connectingState;\n\t}\n\n\treturn (\n\t\t{deviceItems, bluetoothInitialize, scan}\n\t);\n}\nexport default _Bluetooth; \n\n\nclass Bluetooth {\n\tisEnabled: boolean;\n\tdevices: any[] = [];\n\n\tconstructor() {\n\t\tthis.isEnabled = false;\n\t}\n\n\tinitialize(): void {\t\n\t\tble.initialize({\n\t\t\t\"request\": true,\n\t\t\t\"statusReceiver\": true,\n\t\t\t\"restoreKey\": \"magic-light-ble\"\n\t\t}).subscribe((result) => {\n\t\t\tif (result.status == \"disabled\") {\n\t\t\t\tconst alert = document.createElement('ion-alert');\n\t\t\t\talert.cssClass = 'my-custom-class';\n\t\t\t\talert.header = 'Alert';\n\t\t\t\talert.subHeader = 'Subtitle';\n\t\t\t\talert.message = 'This is an alert message.';\n\t\t\t\talert.buttons = ['OK'];\n\n\t\t\t\tdocument.body.appendChild(alert);\n\t\t\t\treturn alert.present();\n\t\t\t\tthis.isEnabled = false;\n\t\t\t\tdocument.addEventListener(\"resume\", this.onResume);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.isEnabled = true;\n\t\t\t}\n\t\t});\n\n\t\tble.stopScan();\n\t}\n\n\tasync scan(scantime): Promise<any[]> {\n\t\tif(this.isEnabled) {\n\t\t\tble.startScan({\n\t\t\t\t\"allowDuplicates\": false,\n\t\t\t}).subscribe((result) => {\n\t\t\t\tif(result.status === \"scanResult\") {\n\t\t\t\t\tthis.pushIfNotExists(result);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tawait this.timeout(scantime);\n\n\t\t\tble.stopScan().then((result) => {\n\t\t\t\tif(result.status !== \"scanStopped\") {\n\t\t\t\t\t//warn user?\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this.devices;\n\t}\n\n\tpushIfNotExists(d): void {\n\t\tlet count = 0;\n\t\tif(this.devices.length > 0) {\n\t\t\tthis.devices.forEach(e => {\n\t\t\t\tif(!isEqual(d, e)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif(count >= this.devices.length) {\n\t\t\t\tthis.devices.push(d);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.devices.push(d);\n\t\t}\n\t}\n\n\ttimeout(s): Promise<object> {\n\t\treturn new Promise(resolve => setTimeout(resolve, s * 1000));\n\t}\n \n\tonResume(): void {\n\t\tble.isEnabled().then((result) => {\n\t\t\tif(result.isEnabled){\n\t\t\t\tthis.isEnabled = true;\n\t\t\t\tdocument.removeEventListener(\"resume\", this.onResume)\n\t\t\t}\n\t\t});\n\t}\n}\n\n//\n{/* <IonAlert\n\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\theader={'Error'}\n\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\tbuttons={[\n\t\t\t\t{\n\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\thandler: () => {\n\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\thandler: () => {\n\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t/>\n */}\n\n{/* <IonAlert\n\t\t\t\t\tisOpen={this.state.isContinueNoDevice}\n\t\t\t\t\theader={'Continue?'}\n\t\t\t\t\tmessage={'Are you sure you want to continue without selecting a device?'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{ text: 'Cancel', },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('continue ok'); //move to next screen\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isBluetoothNotEnabled}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'Bluetooth is not enabled. Please enable Bluetooth and try again.'}\n\t\t\t\t\tbuttons={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Settings',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tconsole.log('opening settings');\n\t\t\t\t\t\t\t\tOpenNativeSettings.open(\"bluetooth\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'Okay',\n\t\t\t\t\t\t\thandler: () => {\n\t\t\t\t\t\t\t\tthis.bluetooth.bluetoothInitialize();\n\t\t\t\t\t\t\t\tthis.bluetooth.scan(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<IonAlert\n\t\t\t\t\tisOpen={this.state.isErrorConnecting}\n\t\t\t\t\theader={'Error'}\n\t\t\t\t\tmessage={'There was an error connecting to the Bluetooth device. Make sure the device is turned on and try again.'}\n\t\t\t\t\tbuttons={['OK']}\n\t\t\t\t/>\n */}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}